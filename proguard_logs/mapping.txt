android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    java.util.HashMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.i:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.j:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    java.util.HashMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.k:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.l:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.m:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.n:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.o:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.p:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.r:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.s:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.u:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.v:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.w:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.x:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.y:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.z:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.aa:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ab:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    boolean mProcessingChange -> g
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void gc() -> c
    int size() -> a
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> b
    int idealByteArraySize(int) -> c
    int idealIntArraySize(int) -> d
android.support.v4.view.GravityCompat -> android.support.v4.view.a:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.b:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.c:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.d:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.e:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.f:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.g:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.h:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.i:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.j:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.k:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.l:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.m:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.n:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.o:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.p:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.q:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.r:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.s:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.t:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.u:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.v:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.w:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.x:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.y:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> android.support.v4.view.z:
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.aa:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.ab:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ac:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ad:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.ae:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.af:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompatEclairMr1 -> android.support.v4.view.ag:
    boolean isOpaque(android.view.View) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.ah:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.ai:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.aj:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ak:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.al:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> aa
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ab
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ac
    int mDrawingOrder -> ad
    java.util.ArrayList mDrawingOrderedChildren -> ae
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> af
    java.lang.Runnable mEndScrollRunnable -> ag
    int mScrollState -> ah
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void sortChildDrawingOrder() -> g
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> h
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.am:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.an:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ao:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.ap:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.aq:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ar:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.as:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.at:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.au:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.av:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.aw:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    int mMinDrawerMargin -> b
    int mScrimColor -> c
    float mScrimOpacity -> d
    android.graphics.Paint mScrimPaint -> e
    android.support.v4.widget.ViewDragHelper mLeftDragger -> f
    android.support.v4.widget.ViewDragHelper mRightDragger -> g
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> i
    int mDrawerState -> j
    boolean mInLayout -> k
    boolean mFirstLayout -> l
    int mLockModeLeft -> m
    int mLockModeRight -> n
    boolean mDisallowInterceptRequested -> o
    boolean mChildrenCanceledTouch -> p
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> q
    float mInitialMotionX -> r
    float mInitialMotionY -> s
    android.graphics.drawable.Drawable mShadowLeft -> t
    android.graphics.drawable.Drawable mShadowRight -> u
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewGravity(android.view.View) -> e
    boolean checkDrawerViewGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> k
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void closeDrawer(android.view.View) -> i
    boolean isDrawerVisible(android.view.View) -> j
    boolean hasPeekingDrawer() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> e
    android.view.View findVisibleDrawer() -> f
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int[] access$100() -> c
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.a:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.b:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.c:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.d:
    int mGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.e:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.f:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.g:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.h:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.i:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.j:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl IMPL -> b
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.k:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.l:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.m:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.n:
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.o:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawable -> d
    int mOverhangSize -> e
    boolean mCanSlide -> f
    android.view.View mSlideableView -> g
    float mSlideOffset -> h
    float mParallaxOffset -> i
    int mSlideRange -> j
    boolean mIsUnableToDrag -> k
    int mParallaxBy -> l
    float mInitialMotionX -> m
    float mInitialMotionY -> n
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> o
    android.support.v4.widget.ViewDragHelper mDragHelper -> p
    boolean mPreservedOpenState -> q
    boolean mFirstLayout -> r
    android.graphics.Rect mTmpRect -> s
    java.util.ArrayList mPostedRunnables -> t
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean viewIsOpaque(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowResource(int) -> setShadowResource
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void access$900(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1000(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.p:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.q:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.r:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.s:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.t:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.u:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.v:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.w:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.x:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.y:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    int getViewDragState() -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> a
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> d
    void ensureMotionHistorySizeForId(int) -> e
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> a
    void setDragState(int) -> b
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> c
    boolean checkTouchSlop(int,int) -> b
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> c
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> d
    int getEdgesTouched(int,int) -> e
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.z:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.aa:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
com.google.gson.ExclusionStrategy -> com.a.a.a:
    boolean shouldSkipField(com.google.gson.FieldAttributes) -> a
    boolean shouldSkipClass(java.lang.Class) -> a
com.google.gson.FieldAttributes -> com.a.a.b:
    java.lang.reflect.Field field -> a
com.google.gson.FieldNamingPolicy -> com.a.a.c:
    com.google.gson.FieldNamingPolicy IDENTITY -> a
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE -> b
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE_WITH_SPACES -> c
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_UNDERSCORES -> d
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_DASHES -> e
    com.google.gson.FieldNamingPolicy[] $VALUES -> f
    com.google.gson.FieldNamingPolicy[] values() -> values
    com.google.gson.FieldNamingPolicy valueOf(java.lang.String) -> valueOf
    java.lang.String separateCamelCase(java.lang.String,java.lang.String) -> b
    java.lang.String upperCaseFirstLetter(java.lang.String) -> b
    java.lang.String modifyString(char,java.lang.String,int) -> a
    java.lang.String access$100(java.lang.String) -> a
    java.lang.String access$200(java.lang.String,java.lang.String) -> a
com.google.gson.FieldNamingPolicy$1 -> com.a.a.d:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$2 -> com.a.a.e:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$3 -> com.a.a.f:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$4 -> com.a.a.g:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$5 -> com.a.a.h:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingStrategy -> com.a.a.i:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.Gson -> com.a.a.j:
    java.lang.ThreadLocal calls -> c
    java.util.Map typeTokenCache -> d
    java.util.List factories -> e
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> f
    boolean serializeNulls -> g
    boolean htmlSafe -> h
    boolean generateNonExecutableJson -> i
    boolean prettyPrinting -> j
    com.google.gson.JsonDeserializationContext deserializationContext -> a
    com.google.gson.JsonSerializationContext serializationContext -> b
    com.google.gson.TypeAdapter doubleAdapter(boolean) -> a
    com.google.gson.TypeAdapter floatAdapter(boolean) -> b
    void checkValidFloatingPoint(double) -> a
    com.google.gson.TypeAdapter longAdapter(com.google.gson.LongSerializationPolicy) -> a
    com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getDelegateAdapter(com.google.gson.TypeAdapterFactory,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getAdapter(java.lang.Class) -> a
    java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type) -> a
    java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type) -> a
    void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader) -> a
    java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type) -> a
    java.lang.String toString() -> toString
    void access$000(com.google.gson.Gson,double) -> a
com.google.gson.Gson$1 -> com.a.a.k:
    com.google.gson.Gson this$0 -> a
    java.util.Map initialValue() -> a
    java.lang.Object initialValue() -> initialValue
com.google.gson.Gson$2 -> com.a.a.l:
    com.google.gson.Gson this$0 -> a
com.google.gson.Gson$3 -> com.a.a.m:
    com.google.gson.Gson this$0 -> a
com.google.gson.Gson$4 -> com.a.a.n:
    com.google.gson.Gson this$0 -> a
    java.lang.Double read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$5 -> com.a.a.o:
    com.google.gson.Gson this$0 -> a
    java.lang.Float read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$6 -> com.a.a.p:
    com.google.gson.Gson this$0 -> a
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$FutureTypeAdapter -> com.a.a.q:
    com.google.gson.TypeAdapter delegate -> a
    void setDelegate(com.google.gson.TypeAdapter) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.InstanceCreator -> com.a.a.r:
    java.lang.Object createInstance(java.lang.reflect.Type) -> a
com.google.gson.JsonArray -> com.a.a.s:
    java.util.List elements -> a
    void add(com.google.gson.JsonElement) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.Number getAsNumber() -> a
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    boolean getAsBoolean() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.gson.JsonDeserializationContext -> com.a.a.t:
com.google.gson.JsonElement -> com.a.a.u:
    boolean isJsonArray() -> g
    boolean isJsonObject() -> h
    boolean isJsonPrimitive() -> i
    boolean isJsonNull() -> j
    com.google.gson.JsonObject getAsJsonObject() -> k
    com.google.gson.JsonArray getAsJsonArray() -> l
    com.google.gson.JsonPrimitive getAsJsonPrimitive() -> m
    boolean getAsBoolean() -> f
    java.lang.Boolean getAsBooleanWrapper() -> n
    java.lang.Number getAsNumber() -> a
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    java.lang.String toString() -> toString
com.google.gson.JsonIOException -> com.a.a.v:
com.google.gson.JsonNull -> com.a.a.w:
    com.google.gson.JsonNull INSTANCE -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.gson.JsonObject -> com.a.a.x:
    com.google.gson.internal.StringMap members -> a
    void add(java.lang.String,com.google.gson.JsonElement) -> a
    java.util.Set entrySet() -> o
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.gson.JsonParseException -> com.a.a.y:
com.google.gson.JsonPrimitive -> com.a.a.z:
    java.lang.Class[] PRIMITIVE_TYPES -> a
    java.lang.Object value -> b
    void setValue(java.lang.Object) -> a
    boolean isBoolean() -> o
    java.lang.Boolean getAsBooleanWrapper() -> n
    boolean getAsBoolean() -> f
    boolean isNumber() -> p
    java.lang.Number getAsNumber() -> a
    boolean isString() -> q
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    boolean isPrimitiveOrString(java.lang.Object) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isIntegral(com.google.gson.JsonPrimitive) -> a
com.google.gson.JsonSerializationContext -> com.a.a.aa:
com.google.gson.JsonSyntaxException -> com.a.a.ab:
com.google.gson.LongSerializationPolicy -> com.a.a.ac:
    com.google.gson.LongSerializationPolicy DEFAULT -> a
    com.google.gson.LongSerializationPolicy STRING -> b
    com.google.gson.LongSerializationPolicy[] $VALUES -> c
    com.google.gson.LongSerializationPolicy[] values() -> values
    com.google.gson.LongSerializationPolicy valueOf(java.lang.String) -> valueOf
com.google.gson.LongSerializationPolicy$1 -> com.a.a.ad:
com.google.gson.LongSerializationPolicy$2 -> com.a.a.ae:
com.google.gson.TypeAdapter -> com.a.a.af:
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.JsonElement toJsonTree(java.lang.Object) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
com.google.gson.TypeAdapterFactory -> com.a.a.ag:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.annotations.Expose -> com.a.a.a.a:
    boolean serialize() -> a
    boolean deserialize() -> b
com.google.gson.annotations.SerializedName -> com.a.a.a.b:
    java.lang.String value() -> a
com.google.gson.annotations.Since -> com.a.a.a.c:
    double value() -> a
com.google.gson.annotations.Until -> com.a.a.a.d:
    double value() -> a
com.google.gson.internal.$Gson$Preconditions -> com.a.a.b.a:
    java.lang.Object checkNotNull(java.lang.Object) -> a
    void checkArgument(boolean) -> a
com.google.gson.internal.$Gson$Types -> com.a.a.b.b:
    java.lang.reflect.Type[] EMPTY_TYPE_ARRAY -> a
    java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> a
    java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type) -> a
    java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type) -> b
    java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type) -> c
    java.lang.reflect.Type canonicalize(java.lang.reflect.Type) -> d
    java.lang.Class getRawType(java.lang.reflect.Type) -> e
    boolean equal(java.lang.Object,java.lang.Object) -> a
    boolean equals(java.lang.reflect.Type,java.lang.reflect.Type) -> a
    int hashCodeOrZero(java.lang.Object) -> b
    java.lang.String typeToString(java.lang.reflect.Type) -> f
    java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> a
    java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> b
    java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type) -> g
    java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type,java.lang.Class) -> a
    java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type,java.lang.Class) -> b
    java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type) -> a
    java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable) -> a
    int indexOf(java.lang.Object[],java.lang.Object) -> a
    java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable) -> a
    void checkNotPrimitive(java.lang.reflect.Type) -> i
    void access$000(java.lang.reflect.Type) -> h
    int access$100(java.lang.Object) -> a
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl -> com.a.a.b.c:
    java.lang.reflect.Type componentType -> a
    java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl -> com.a.a.b.d:
    java.lang.reflect.Type ownerType -> a
    java.lang.reflect.Type rawType -> b
    java.lang.reflect.Type[] typeArguments -> c
    java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.reflect.Type getRawType() -> getRawType
    java.lang.reflect.Type getOwnerType() -> getOwnerType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$WildcardTypeImpl -> com.a.a.b.e:
    java.lang.reflect.Type upperBound -> a
    java.lang.reflect.Type lowerBound -> b
    java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor -> com.a.a.b.f:
    java.util.Map instanceCreators -> a
    com.google.gson.internal.ObjectConstructor get(com.google.gson.reflect.TypeToken) -> a
    com.google.gson.internal.ObjectConstructor newDefaultConstructor(java.lang.Class) -> a
    com.google.gson.internal.ObjectConstructor newDefaultImplementationConstructor(java.lang.Class) -> b
    com.google.gson.internal.ObjectConstructor newUnsafeAllocator(java.lang.reflect.Type,java.lang.Class) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor$1 -> com.a.a.b.g:
    com.google.gson.InstanceCreator val$creator -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$2 -> com.a.a.b.h:
    java.lang.reflect.Constructor val$constructor -> a
    com.google.gson.internal.ConstructorConstructor this$0 -> b
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$3 -> com.a.a.b.i:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$4 -> com.a.a.b.j:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$5 -> com.a.a.b.k:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$6 -> com.a.a.b.l:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$7 -> com.a.a.b.m:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$8 -> com.a.a.b.n:
    com.google.gson.internal.UnsafeAllocator unsafeAllocator -> d
    java.lang.Class val$rawType -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    java.lang.Object construct() -> a
com.google.gson.internal.Excluder -> com.a.a.b.o:
    com.google.gson.internal.Excluder DEFAULT -> a
    double version -> b
    int modifiers -> c
    boolean serializeInnerClasses -> d
    boolean requireExpose -> e
    java.util.List serializationStrategies -> f
    java.util.List deserializationStrategies -> g
    com.google.gson.internal.Excluder clone() -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    boolean excludeField(java.lang.reflect.Field,boolean) -> a
    boolean excludeClass(java.lang.Class,boolean) -> a
    boolean isAnonymousOrLocal(java.lang.Class) -> a
    boolean isInnerClass(java.lang.Class) -> b
    boolean isStatic(java.lang.Class) -> c
    boolean isValidVersion(com.google.gson.annotations.Since,com.google.gson.annotations.Until) -> a
    boolean isValidSince(com.google.gson.annotations.Since) -> a
    boolean isValidUntil(com.google.gson.annotations.Until) -> a
    java.lang.Object clone() -> clone
com.google.gson.internal.Excluder$1 -> com.a.a.b.p:
    com.google.gson.TypeAdapter delegate -> f
    boolean val$skipDeserialize -> a
    boolean val$skipSerialize -> b
    com.google.gson.Gson val$gson -> c
    com.google.gson.reflect.TypeToken val$type -> d
    com.google.gson.internal.Excluder this$0 -> e
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.TypeAdapter delegate() -> a
com.google.gson.internal.JsonReaderInternalAccess -> com.a.a.b.q:
    com.google.gson.internal.JsonReaderInternalAccess INSTANCE -> a
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> a
com.google.gson.internal.LazilyParsedNumber -> com.a.a.b.r:
    java.lang.String value -> a
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    java.lang.String toString() -> toString
com.google.gson.internal.ObjectConstructor -> com.a.a.b.s:
    java.lang.Object construct() -> a
com.google.gson.internal.Primitives -> com.a.a.b.t:
    java.util.Map PRIMITIVE_TO_WRAPPER_TYPE -> a
    java.util.Map WRAPPER_TO_PRIMITIVE_TYPE -> b
    void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class) -> a
    boolean isPrimitive(java.lang.reflect.Type) -> a
com.google.gson.internal.Streams -> com.a.a.b.u:
    void write(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter) -> a
com.google.gson.internal.StringMap -> com.a.a.b.v:
    com.google.gson.internal.StringMap$LinkedEntry header -> a
    java.util.Map$Entry[] EMPTY_TABLE -> b
    com.google.gson.internal.StringMap$LinkedEntry[] table -> c
    int size -> d
    int threshold -> e
    java.util.Set keySet -> f
    java.util.Set entrySet -> g
    java.util.Collection values -> h
    int seed -> i
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    com.google.gson.internal.StringMap$LinkedEntry getEntry(java.lang.String) -> a
    java.lang.Object put(java.lang.String,java.lang.Object) -> a
    void addNewEntry(java.lang.String,java.lang.Object,int,int) -> a
    com.google.gson.internal.StringMap$LinkedEntry[] makeTable(int) -> a
    com.google.gson.internal.StringMap$LinkedEntry[] doubleCapacity() -> a
    java.lang.Object remove(java.lang.Object) -> remove
    void unlink(com.google.gson.internal.StringMap$LinkedEntry) -> a
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    boolean removeMapping(java.lang.Object,java.lang.Object) -> a
    int hash(java.lang.String) -> b
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    com.google.gson.internal.StringMap$LinkedEntry access$300(com.google.gson.internal.StringMap) -> a
    int access$500(com.google.gson.internal.StringMap) -> b
    boolean access$600(com.google.gson.internal.StringMap,java.lang.Object,java.lang.Object) -> a
com.google.gson.internal.StringMap$1 -> com.a.a.b.w:
com.google.gson.internal.StringMap$EntrySet -> com.a.a.b.x:
    com.google.gson.internal.StringMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    void clear() -> clear
com.google.gson.internal.StringMap$EntrySet$1 -> com.a.a.b.y:
    com.google.gson.internal.StringMap$EntrySet this$1 -> a
    java.util.Map$Entry next() -> a
    java.lang.Object next() -> next
com.google.gson.internal.StringMap$KeySet -> com.a.a.b.z:
    com.google.gson.internal.StringMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.gson.internal.StringMap$KeySet$1 -> com.a.a.b.aa:
    com.google.gson.internal.StringMap$KeySet this$1 -> a
    java.lang.String next() -> a
    java.lang.Object next() -> next
com.google.gson.internal.StringMap$LinkedEntry -> com.a.a.b.ab:
    java.lang.String key -> a
    java.lang.Object value -> b
    int hash -> c
    com.google.gson.internal.StringMap$LinkedEntry next -> d
    com.google.gson.internal.StringMap$LinkedEntry nxt -> e
    com.google.gson.internal.StringMap$LinkedEntry prv -> f
    java.lang.String getKey() -> a
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object getKey() -> getKey
com.google.gson.internal.StringMap$LinkedHashIterator -> com.a.a.b.ac:
    com.google.gson.internal.StringMap$LinkedEntry next -> b
    com.google.gson.internal.StringMap$LinkedEntry lastReturned -> c
    com.google.gson.internal.StringMap this$0 -> d
    boolean hasNext() -> hasNext
    com.google.gson.internal.StringMap$LinkedEntry nextEntry() -> b
    void remove() -> remove
com.google.gson.internal.StringMap$Values -> com.a.a.b.ad:
    com.google.gson.internal.StringMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
com.google.gson.internal.StringMap$Values$1 -> com.a.a.b.ae:
    com.google.gson.internal.StringMap$Values this$1 -> a
    java.lang.Object next() -> next
com.google.gson.internal.UnsafeAllocator -> com.a.a.b.af:
    java.lang.Object newInstance(java.lang.Class) -> a
    com.google.gson.internal.UnsafeAllocator create() -> a
com.google.gson.internal.UnsafeAllocator$1 -> com.a.a.b.ag:
    java.lang.reflect.Method val$allocateInstance -> a
    java.lang.Object val$unsafe -> b
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$2 -> com.a.a.b.ah:
    java.lang.reflect.Method val$newInstance -> a
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$3 -> com.a.a.b.ai:
    java.lang.reflect.Method val$newInstance -> a
    int val$constructorId -> b
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$4 -> com.a.a.b.aj:
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.bind.ArrayTypeAdapter -> com.a.a.b.a.a:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.lang.Class componentType -> b
    com.google.gson.TypeAdapter componentTypeAdapter -> c
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ArrayTypeAdapter$1 -> com.a.a.b.a.b:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.CollectionTypeAdapterFactory -> com.a.a.b.a.c:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter -> com.a.a.b.a.d:
    com.google.gson.TypeAdapter elementTypeAdapter -> b
    com.google.gson.internal.ObjectConstructor constructor -> c
    com.google.gson.internal.bind.CollectionTypeAdapterFactory this$0 -> a
    java.util.Collection read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Collection) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.DateTypeAdapter -> com.a.a.b.a.e:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat enUsFormat -> b
    java.text.DateFormat localFormat -> c
    java.text.DateFormat iso8601Format -> d
    java.text.DateFormat buildIso8601Format() -> a
    java.util.Date read(com.google.gson.stream.JsonReader) -> a
    java.util.Date deserializeToDate(java.lang.String) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Date) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.DateTypeAdapter$1 -> com.a.a.b.a.f:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.JsonTreeReader -> com.a.a.b.a.g:
    java.io.Reader UNREADABLE_READER -> a
    java.lang.Object SENTINEL_CLOSED -> b
    java.util.List stack -> c
    void beginArray() -> a
    void endArray() -> b
    void beginObject() -> c
    void endObject() -> d
    boolean hasNext() -> e
    com.google.gson.stream.JsonToken peek() -> f
    java.lang.Object peekStack() -> q
    java.lang.Object popStack() -> r
    void expect(com.google.gson.stream.JsonToken) -> a
    java.lang.String nextName() -> g
    java.lang.String nextString() -> h
    boolean nextBoolean() -> i
    void nextNull() -> j
    double nextDouble() -> k
    long nextLong() -> l
    int nextInt() -> m
    void close() -> close
    void skipValue() -> n
    java.lang.String toString() -> toString
    void promoteNameToValue() -> o
com.google.gson.internal.bind.JsonTreeReader$1 -> com.a.a.b.a.h:
    int read(char[],int,int) -> read
    void close() -> close
com.google.gson.internal.bind.JsonTreeWriter -> com.a.a.b.a.i:
    java.io.Writer UNWRITABLE_WRITER -> a
    com.google.gson.JsonPrimitive SENTINEL_CLOSED -> b
    java.util.List stack -> c
    java.lang.String pendingName -> d
    com.google.gson.JsonElement product -> e
    com.google.gson.JsonElement get() -> a
    com.google.gson.JsonElement peek() -> i
    void put(com.google.gson.JsonElement) -> a
    com.google.gson.stream.JsonWriter beginArray() -> b
    com.google.gson.stream.JsonWriter endArray() -> c
    com.google.gson.stream.JsonWriter beginObject() -> d
    com.google.gson.stream.JsonWriter endObject() -> e
    com.google.gson.stream.JsonWriter name(java.lang.String) -> a
    com.google.gson.stream.JsonWriter value(java.lang.String) -> b
    com.google.gson.stream.JsonWriter nullValue() -> f
    com.google.gson.stream.JsonWriter value(boolean) -> a
    com.google.gson.stream.JsonWriter value(long) -> a
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> a
    void flush() -> flush
    void close() -> close
com.google.gson.internal.bind.JsonTreeWriter$1 -> com.a.a.b.a.j:
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.google.gson.internal.bind.MapTypeAdapterFactory -> com.a.a.b.a.k:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    boolean complexMapKeySerialization -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getKeyAdapter(com.google.gson.Gson,java.lang.reflect.Type) -> a
    boolean access$000(com.google.gson.internal.bind.MapTypeAdapterFactory) -> a
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter -> com.a.a.b.a.l:
    com.google.gson.TypeAdapter keyTypeAdapter -> b
    com.google.gson.TypeAdapter valueTypeAdapter -> c
    com.google.gson.internal.ObjectConstructor constructor -> d
    com.google.gson.internal.bind.MapTypeAdapterFactory this$0 -> a
    java.util.Map read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Map) -> a
    java.lang.String keyToString(com.google.gson.JsonElement) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ObjectTypeAdapter -> com.a.a.b.a.m:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    com.google.gson.Gson gson -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ObjectTypeAdapter$1 -> com.a.a.b.a.n:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.ObjectTypeAdapter$2 -> com.a.a.b.a.o:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory -> com.a.a.b.a.p:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    com.google.gson.FieldNamingStrategy fieldNamingPolicy -> b
    com.google.gson.internal.Excluder excluder -> c
    boolean excludeField(java.lang.reflect.Field,boolean) -> a
    java.lang.String getFieldName(java.lang.reflect.Field) -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField createBoundField(com.google.gson.Gson,java.lang.reflect.Field,java.lang.String,com.google.gson.reflect.TypeToken,boolean,boolean) -> a
    java.util.Map getBoundFields(com.google.gson.Gson,com.google.gson.reflect.TypeToken,java.lang.Class) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1 -> com.a.a.b.a.q:
    com.google.gson.TypeAdapter typeAdapter -> a
    com.google.gson.Gson val$context -> b
    com.google.gson.reflect.TypeToken val$fieldType -> c
    java.lang.reflect.Field val$field -> d
    boolean val$isPrimitive -> e
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory this$0 -> f
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter -> com.a.a.b.a.r:
    com.google.gson.internal.ObjectConstructor constructor -> b
    java.util.Map boundFields -> c
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory this$0 -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField -> com.a.a.b.a.s:
    java.lang.String name -> g
    boolean serialized -> h
    boolean deserialized -> i
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> a
com.google.gson.internal.bind.SqlDateTypeAdapter -> com.a.a.b.a.t:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat format -> b
    java.sql.Date read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Date) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.SqlDateTypeAdapter$1 -> com.a.a.b.a.u:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TimeTypeAdapter -> com.a.a.b.a.v:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat format -> b
    java.sql.Time read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Time) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TimeTypeAdapter$1 -> com.a.a.b.a.w:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper -> com.a.a.b.a.x:
    com.google.gson.Gson context -> a
    com.google.gson.TypeAdapter delegate -> b
    java.lang.reflect.Type type -> c
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters -> com.a.a.b.a.y:
    com.google.gson.TypeAdapter CLASS -> a
    com.google.gson.TypeAdapterFactory CLASS_FACTORY -> b
    com.google.gson.TypeAdapter BIT_SET -> c
    com.google.gson.TypeAdapterFactory BIT_SET_FACTORY -> d
    com.google.gson.TypeAdapter BOOLEAN -> e
    com.google.gson.TypeAdapter BOOLEAN_AS_STRING -> f
    com.google.gson.TypeAdapterFactory BOOLEAN_FACTORY -> g
    com.google.gson.TypeAdapter BYTE -> h
    com.google.gson.TypeAdapterFactory BYTE_FACTORY -> i
    com.google.gson.TypeAdapter SHORT -> j
    com.google.gson.TypeAdapterFactory SHORT_FACTORY -> k
    com.google.gson.TypeAdapter INTEGER -> l
    com.google.gson.TypeAdapterFactory INTEGER_FACTORY -> m
    com.google.gson.TypeAdapter LONG -> n
    com.google.gson.TypeAdapter FLOAT -> o
    com.google.gson.TypeAdapter DOUBLE -> p
    com.google.gson.TypeAdapter NUMBER -> q
    com.google.gson.TypeAdapterFactory NUMBER_FACTORY -> r
    com.google.gson.TypeAdapter CHARACTER -> s
    com.google.gson.TypeAdapterFactory CHARACTER_FACTORY -> t
    com.google.gson.TypeAdapter STRING -> u
    com.google.gson.TypeAdapter BIG_DECIMAL -> v
    com.google.gson.TypeAdapter BIG_INTEGER -> w
    com.google.gson.TypeAdapterFactory STRING_FACTORY -> x
    com.google.gson.TypeAdapter STRING_BUILDER -> y
    com.google.gson.TypeAdapterFactory STRING_BUILDER_FACTORY -> z
    com.google.gson.TypeAdapter STRING_BUFFER -> A
    com.google.gson.TypeAdapterFactory STRING_BUFFER_FACTORY -> B
    com.google.gson.TypeAdapter URL -> C
    com.google.gson.TypeAdapterFactory URL_FACTORY -> D
    com.google.gson.TypeAdapter URI -> E
    com.google.gson.TypeAdapterFactory URI_FACTORY -> F
    com.google.gson.TypeAdapter INET_ADDRESS -> G
    com.google.gson.TypeAdapterFactory INET_ADDRESS_FACTORY -> H
    com.google.gson.TypeAdapter UUID -> I
    com.google.gson.TypeAdapterFactory UUID_FACTORY -> J
    com.google.gson.TypeAdapterFactory TIMESTAMP_FACTORY -> K
    com.google.gson.TypeAdapter CALENDAR -> L
    com.google.gson.TypeAdapterFactory CALENDAR_FACTORY -> M
    com.google.gson.TypeAdapter LOCALE -> N
    com.google.gson.TypeAdapterFactory LOCALE_FACTORY -> O
    com.google.gson.TypeAdapter JSON_ELEMENT -> P
    com.google.gson.TypeAdapterFactory JSON_ELEMENT_FACTORY -> Q
    com.google.gson.TypeAdapterFactory ENUM_FACTORY -> R
    com.google.gson.TypeAdapterFactory newEnumTypeHierarchyFactory() -> a
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactoryForMultipleTypes(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> b
    com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter) -> b
com.google.gson.internal.bind.TypeAdapters$1 -> com.a.a.b.a.z:
    void write(com.google.gson.stream.JsonWriter,java.lang.Class) -> a
    java.lang.Class read(com.google.gson.stream.JsonReader) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$10 -> com.a.a.b.a.aa:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$11 -> com.a.a.b.a.ab:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$12 -> com.a.a.b.a.ac:
    java.lang.Character read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Character) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$13 -> com.a.a.b.a.ad:
    java.lang.String read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.String) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$14 -> com.a.a.b.a.ae:
    java.math.BigDecimal read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.math.BigDecimal) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$15 -> com.a.a.b.a.af:
    java.math.BigInteger read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.math.BigInteger) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$16 -> com.a.a.b.a.ag:
    java.lang.StringBuilder read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.StringBuilder) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$17 -> com.a.a.b.a.ah:
    java.lang.StringBuffer read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.StringBuffer) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$18 -> com.a.a.b.a.ai:
    java.net.URL read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.URL) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$19 -> com.a.a.b.a.aj:
    java.net.URI read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.URI) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$2 -> com.a.a.b.a.ak:
    java.util.BitSet read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.BitSet) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$20 -> com.a.a.b.a.al:
    java.net.InetAddress read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.InetAddress) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$21 -> com.a.a.b.a.am:
    java.util.UUID read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.UUID) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$22 -> com.a.a.b.a.an:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$22$1 -> com.a.a.b.a.ao:
    com.google.gson.TypeAdapter val$dateTypeAdapter -> a
    com.google.gson.internal.bind.TypeAdapters$22 this$0 -> b
    java.sql.Timestamp read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Timestamp) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$23 -> com.a.a.b.a.ap:
    java.util.Calendar read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Calendar) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$24 -> com.a.a.b.a.aq:
    java.util.Locale read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Locale) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$25 -> com.a.a.b.a.ar:
    com.google.gson.JsonElement read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,com.google.gson.JsonElement) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$26 -> com.a.a.b.a.as:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$28 -> com.a.a.b.a.at:
    java.lang.Class val$type -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$29 -> com.a.a.b.a.au:
    java.lang.Class val$unboxed -> a
    java.lang.Class val$boxed -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$3 -> com.a.a.b.a.av:
    java.lang.Boolean read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Boolean) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$30 -> com.a.a.b.a.aw:
    java.lang.Class val$base -> a
    java.lang.Class val$sub -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$31 -> com.a.a.b.a.ax:
    java.lang.Class val$clazz -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$32 -> com.a.a.b.a.ay:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> a
com.google.gson.internal.bind.TypeAdapters$4 -> com.a.a.b.a.az:
    java.lang.Boolean read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Boolean) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$5 -> com.a.a.b.a.ba:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$6 -> com.a.a.b.a.bb:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$7 -> com.a.a.b.a.bc:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$8 -> com.a.a.b.a.bd:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$9 -> com.a.a.b.a.be:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter -> com.a.a.b.a.bf:
    java.util.Map nameToConstant -> a
    java.util.Map constantToName -> b
    java.lang.Enum read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Enum) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.reflect.TypeToken -> com.a.a.c.a:
    java.lang.Class rawType -> a
    java.lang.reflect.Type type -> b
    int hashCode -> c
    java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class) -> a
    java.lang.Class getRawType() -> a
    java.lang.reflect.Type getType() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.google.gson.reflect.TypeToken get(java.lang.reflect.Type) -> a
    com.google.gson.reflect.TypeToken get(java.lang.Class) -> b
com.google.gson.stream.JsonReader -> com.a.a.d.a:
    char[] NON_EXECUTE_PREFIX -> a
    com.google.gson.stream.StringPool stringPool -> b
    java.io.Reader in -> c
    boolean lenient -> d
    char[] buffer -> e
    int pos -> f
    int limit -> g
    int bufferStartLine -> h
    int bufferStartColumn -> i
    com.google.gson.stream.JsonScope[] stack -> j
    int stackSize -> k
    com.google.gson.stream.JsonToken token -> l
    java.lang.String name -> m
    java.lang.String value -> n
    int valuePos -> o
    int valueLength -> p
    boolean skipping -> q
    void setLenient(boolean) -> a
    boolean isLenient() -> p
    void beginArray() -> a
    void endArray() -> b
    void beginObject() -> c
    void endObject() -> d
    void expect(com.google.gson.stream.JsonToken) -> a
    boolean hasNext() -> e
    com.google.gson.stream.JsonToken peek() -> f
    void consumeNonExecutePrefix() -> o
    com.google.gson.stream.JsonToken advance() -> q
    java.lang.String nextName() -> g
    java.lang.String nextString() -> h
    boolean nextBoolean() -> i
    void nextNull() -> j
    double nextDouble() -> k
    long nextLong() -> l
    int nextInt() -> m
    void close() -> close
    void skipValue() -> n
    void push(com.google.gson.stream.JsonScope) -> a
    com.google.gson.stream.JsonToken nextInArray(boolean) -> b
    com.google.gson.stream.JsonToken nextInObject(boolean) -> c
    com.google.gson.stream.JsonToken objectValue() -> r
    com.google.gson.stream.JsonToken nextValue() -> s
    boolean fillBuffer(int) -> a
    int getLineNumber() -> t
    int getColumnNumber() -> u
    int nextNonWhitespace(boolean) -> d
    void checkLenient() -> v
    void skipToEndOfLine() -> w
    boolean skipTo(java.lang.String) -> a
    java.lang.String nextString(char) -> a
    java.lang.String nextLiteral(boolean) -> e
    java.lang.String toString() -> toString
    char readEscapeCharacter() -> x
    com.google.gson.stream.JsonToken readLiteral() -> y
    com.google.gson.stream.JsonToken decodeLiteral() -> z
    com.google.gson.stream.JsonToken decodeNumber(char[],int,int) -> a
    java.io.IOException syntaxError(java.lang.String) -> b
    com.google.gson.stream.JsonToken access$000(com.google.gson.stream.JsonReader) -> a
    int access$100(com.google.gson.stream.JsonReader) -> b
    int access$200(com.google.gson.stream.JsonReader) -> c
    java.lang.String access$302(com.google.gson.stream.JsonReader,java.lang.String) -> a
    java.lang.String access$400(com.google.gson.stream.JsonReader) -> d
    java.lang.String access$402(com.google.gson.stream.JsonReader,java.lang.String) -> b
    com.google.gson.stream.JsonToken access$002(com.google.gson.stream.JsonReader,com.google.gson.stream.JsonToken) -> a
com.google.gson.stream.JsonReader$1 -> com.a.a.d.b:
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> a
com.google.gson.stream.JsonReader$2 -> com.a.a.d.c:
    int[] $SwitchMap$com$google$gson$stream$JsonScope -> a
com.google.gson.stream.JsonScope -> com.a.a.d.d:
    com.google.gson.stream.JsonScope EMPTY_ARRAY -> a
    com.google.gson.stream.JsonScope NONEMPTY_ARRAY -> b
    com.google.gson.stream.JsonScope EMPTY_OBJECT -> c
    com.google.gson.stream.JsonScope DANGLING_NAME -> d
    com.google.gson.stream.JsonScope NONEMPTY_OBJECT -> e
    com.google.gson.stream.JsonScope EMPTY_DOCUMENT -> f
    com.google.gson.stream.JsonScope NONEMPTY_DOCUMENT -> g
    com.google.gson.stream.JsonScope CLOSED -> h
    com.google.gson.stream.JsonScope[] $VALUES -> i
    com.google.gson.stream.JsonScope[] values() -> values
    com.google.gson.stream.JsonScope valueOf(java.lang.String) -> valueOf
com.google.gson.stream.JsonToken -> com.a.a.d.e:
    com.google.gson.stream.JsonToken BEGIN_ARRAY -> a
    com.google.gson.stream.JsonToken END_ARRAY -> b
    com.google.gson.stream.JsonToken BEGIN_OBJECT -> c
    com.google.gson.stream.JsonToken END_OBJECT -> d
    com.google.gson.stream.JsonToken NAME -> e
    com.google.gson.stream.JsonToken STRING -> f
    com.google.gson.stream.JsonToken NUMBER -> g
    com.google.gson.stream.JsonToken BOOLEAN -> h
    com.google.gson.stream.JsonToken NULL -> i
    com.google.gson.stream.JsonToken END_DOCUMENT -> j
    com.google.gson.stream.JsonToken[] $VALUES -> k
    com.google.gson.stream.JsonToken[] values() -> values
    com.google.gson.stream.JsonToken valueOf(java.lang.String) -> valueOf
com.google.gson.stream.JsonWriter -> com.a.a.d.f:
    java.lang.String[] REPLACEMENT_CHARS -> a
    java.lang.String[] HTML_SAFE_REPLACEMENT_CHARS -> b
    java.io.Writer out -> c
    java.util.List stack -> d
    java.lang.String indent -> e
    java.lang.String separator -> f
    boolean lenient -> g
    boolean htmlSafe -> h
    java.lang.String deferredName -> i
    boolean serializeNulls -> j
    void setLenient(boolean) -> b
    boolean isLenient() -> g
    boolean getSerializeNulls() -> h
    com.google.gson.stream.JsonWriter beginArray() -> b
    com.google.gson.stream.JsonWriter endArray() -> c
    com.google.gson.stream.JsonWriter beginObject() -> d
    com.google.gson.stream.JsonWriter endObject() -> e
    com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String) -> a
    com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String) -> a
    com.google.gson.stream.JsonScope peek() -> a
    void replaceTop(com.google.gson.stream.JsonScope) -> a
    com.google.gson.stream.JsonWriter name(java.lang.String) -> a
    void writeDeferredName() -> i
    com.google.gson.stream.JsonWriter value(java.lang.String) -> b
    com.google.gson.stream.JsonWriter nullValue() -> f
    com.google.gson.stream.JsonWriter value(boolean) -> a
    com.google.gson.stream.JsonWriter value(long) -> a
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> a
    void flush() -> flush
    void close() -> close
    void string(java.lang.String) -> c
    void newline() -> j
    void beforeName() -> k
    void beforeValue(boolean) -> c
com.google.gson.stream.JsonWriter$1 -> com.a.a.d.g:
    int[] $SwitchMap$com$google$gson$stream$JsonScope -> a
com.google.gson.stream.MalformedJsonException -> com.a.a.d.h:
com.google.gson.stream.StringPool -> com.a.a.d.i:
    java.lang.String[] pool -> a
    java.lang.String get(char[],int,int) -> a
com.iflytek.cloud.Setting -> com.iflytek.cloud.Setting:
    boolean a -> a
    boolean b -> b
    boolean c -> c
    com.iflytek.cloud.Setting$LOG_LEVEL d -> d
    java.lang.String e -> e
    void saveLogFile(com.iflytek.cloud.Setting$LOG_LEVEL,java.lang.String) -> saveLogFile
    void showLogcat(boolean) -> showLogcat
    void checkNetwork(boolean) -> checkNetwork
    void setLocationEnable(boolean) -> setLocationEnable
com.iflytek.cloud.Setting$LOG_LEVEL -> com.iflytek.cloud.Setting$LOG_LEVEL:
    com.iflytek.cloud.Setting$LOG_LEVEL all -> all
    com.iflytek.cloud.Setting$LOG_LEVEL detail -> detail
    com.iflytek.cloud.Setting$LOG_LEVEL normal -> normal
    com.iflytek.cloud.Setting$LOG_LEVEL low -> low
    com.iflytek.cloud.Setting$LOG_LEVEL none -> none
    com.iflytek.cloud.Setting$LOG_LEVEL[] a -> a
    com.iflytek.cloud.Setting$LOG_LEVEL[] values() -> values
    com.iflytek.cloud.Setting$LOG_LEVEL valueOf(java.lang.String) -> valueOf
com.iflytek.cloud.Version -> com.iflytek.cloud.Version:
    java.lang.String getVersion() -> getVersion
com.iflytek.cloud.a.a -> com.iflytek.cloud.a.a:
    android.content.SharedPreferences b -> b
    android.content.Context c -> c
    com.iflytek.cloud.a.a a -> a
    boolean d -> d
    long e -> e
    com.iflytek.cloud.a.a c(android.content.Context) -> c
    com.iflytek.cloud.a.a a(android.content.Context) -> a
    void a(java.lang.String,long) -> a
    void a(android.location.Location) -> a
    long b(java.lang.String,long) -> b
    float a(java.lang.String) -> a
    boolean b(android.content.Context) -> b
com.iflytek.cloud.a.b -> com.iflytek.cloud.a.b:
    com.iflytek.cloud.c.a a -> a
    void a(android.content.Context) -> a
    void a(java.lang.String,java.lang.String) -> a
    org.json.JSONObject a(boolean) -> a
com.iflytek.cloud.a.c -> com.iflytek.cloud.a.c:
    java.text.SimpleDateFormat c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    int f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.util.ArrayList a -> a
    boolean b -> b
    boolean a() -> a
    java.lang.String b() -> b
    long c() -> c
    boolean d() -> d
    void e() -> e
    java.util.ArrayList a(java.lang.String) -> a
    java.lang.String a(java.util.ArrayList) -> a
    java.lang.String f() -> f
    java.lang.String toString() -> toString
com.iflytek.cloud.a.d -> com.iflytek.cloud.a.d:
    com.iflytek.cloud.a.d a -> a
    com.iflytek.cloud.b.e.g b -> b
    com.iflytek.cloud.a.f c -> c
    com.iflytek.cloud.a.d a() -> a
    void a(android.content.Context) -> a
    void b() -> b
    void c() -> c
    com.iflytek.cloud.a.c b(android.content.Context) -> b
    void a(com.iflytek.cloud.a.c) -> a
    com.iflytek.cloud.b.e.g a(com.iflytek.cloud.a.d,com.iflytek.cloud.b.e.g) -> a
    com.iflytek.cloud.a.f a(com.iflytek.cloud.a.d) -> a
    void b(com.iflytek.cloud.a.d) -> b
com.iflytek.cloud.a.e -> com.iflytek.cloud.a.e:
    android.content.Context a -> a
    com.iflytek.cloud.a.d b -> b
    void a(java.lang.Exception) -> a
    void a(com.iflytek.cloud.b.e.g,byte[]) -> a
    void a(byte[]) -> a
com.iflytek.cloud.a.f -> com.iflytek.cloud.a.f:
    java.lang.String a -> a
    java.lang.String b -> b
    java.util.Vector c -> c
    java.util.Vector d -> d
    java.lang.Object e -> e
    boolean a(android.content.Context) -> a
    void a(java.lang.String) -> a
    java.lang.String a() -> a
    java.util.Vector a(org.json.JSONArray,boolean) -> a
    org.json.JSONArray a(java.util.Vector) -> a
    org.json.JSONObject b() -> b
    com.iflytek.cloud.a.c b(android.content.Context) -> b
    void a(com.iflytek.cloud.a.c) -> a
    java.lang.String toString() -> toString
com.iflytek.cloud.b.a.a -> com.iflytek.cloud.b.a.a:
    com.iflytek.msc.MSCSessionInfo b -> b
    com.iflytek.msc.MSCSessionInfo c -> c
    byte[] d -> d
    int a(android.content.Context,java.lang.String,com.iflytek.cloud.b.b.a) -> a
    void a(java.lang.String) -> a
    void a(byte[],int) -> a
    void a() -> a
    void a(byte[],int,int) -> a
    int b() -> b
    int c() -> c
    int b(java.lang.String) -> b
    boolean a(java.lang.String,java.lang.String) -> a
    java.lang.String c(java.lang.String) -> c
    int d(java.lang.String) -> d
    java.lang.String e(java.lang.String) -> e
    boolean d() -> d
    byte[] e() -> e
    com.iflytek.cloud.b.b.c$a f() -> f
com.iflytek.cloud.b.a.b -> com.iflytek.cloud.b.a.b:
    com.iflytek.cloud.speech.RecognizerListener a -> a
    long b -> b
    boolean c -> c
    boolean d -> d
    boolean e -> e
    boolean f -> f
    int g -> g
    long B -> B
    boolean h -> h
    com.iflytek.cloud.b.a.a i -> i
    com.iflytek.cloud.record.d j -> j
    int k -> k
    int l -> l
    java.lang.String m -> m
    java.util.concurrent.ConcurrentLinkedQueue n -> n
    java.util.concurrent.ConcurrentLinkedQueue o -> o
    java.util.ArrayList p -> p
    long C -> C
    int a() -> a
    java.util.concurrent.ConcurrentLinkedQueue b() -> b
    void a(byte[],int) -> a
    void a(com.iflytek.cloud.speech.RecognizerListener) -> a
    boolean a(boolean) -> a
    void c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
    void A() -> A
    void g() -> g
    void d(boolean) -> d
    void h() -> h
    void i() -> i
    boolean j() -> j
    void k() -> k
    void l() -> l
    void m() -> m
    void B() -> B
    void n() -> n
    void a(byte[]) -> a
    boolean b(boolean) -> b
    void a(byte[],boolean) -> a
    void a(byte[],int,int) -> a
    void a(com.iflytek.cloud.speech.SpeechError) -> a
    void c(boolean) -> c
    void o() -> o
com.iflytek.cloud.b.a.b$1 -> com.iflytek.cloud.b.a.b$1:
    int[] a -> a
com.iflytek.cloud.b.a.c -> com.iflytek.cloud.b.a.c:
    boolean B -> B
    void k() -> k
    boolean a(boolean) -> a
    void a(byte[],int,int) -> a
com.iflytek.cloud.b.b.a -> com.iflytek.cloud.b.b.a:
    int q -> q
    int r -> r
    java.lang.String s -> s
    android.content.Context t -> t
    com.iflytek.cloud.c.a a -> a
    boolean u -> u
    com.iflytek.cloud.b.b.a$a b -> b
    long v -> v
    int w -> w
    com.iflytek.cloud.speech.SpeechError x -> x
    org.json.JSONObject y -> y
    long z -> z
    long A -> A
    java.lang.Runnable c -> c
    boolean j() -> j
    java.lang.String p() -> p
    java.lang.String q() -> q
    java.lang.String r() -> r
    int s() -> s
    void c() -> c
    void t() -> t
    boolean u() -> u
    void a(com.iflytek.cloud.b.b.a$a) -> a
    com.iflytek.cloud.b.b.a$a v() -> v
    void a(com.iflytek.cloud.c.a) -> a
    com.iflytek.cloud.c.a w() -> w
    void x() -> x
    void e() -> e
    void f() -> f
    void i() -> i
    java.lang.String y() -> y
    void a(long,int) -> a
    void a() -> a
    void a(java.lang.String) -> a
    void a(java.lang.String,long,boolean) -> a
    void a(java.lang.String,java.lang.String,boolean) -> a
    java.lang.String z() -> z
    com.iflytek.cloud.b.b.a$a a(com.iflytek.cloud.b.b.a) -> a
com.iflytek.cloud.b.b.a$a -> com.iflytek.cloud.b.b.a$a:
    com.iflytek.cloud.b.b.a$a a -> a
    com.iflytek.cloud.b.b.a$a b -> b
    com.iflytek.cloud.b.b.a$a c -> c
    com.iflytek.cloud.b.b.a$a d -> d
    com.iflytek.cloud.b.b.a$a e -> e
    com.iflytek.cloud.b.b.a$a f -> f
    com.iflytek.cloud.b.b.a$a g -> g
    com.iflytek.cloud.b.b.a$a h -> h
    com.iflytek.cloud.b.b.a$a[] i -> i
    com.iflytek.cloud.b.b.a$a[] values() -> values
    com.iflytek.cloud.b.b.a$a valueOf(java.lang.String) -> valueOf
com.iflytek.cloud.b.b.b -> com.iflytek.cloud.b.b.b:
    com.iflytek.cloud.b.b.a a -> a
    void run() -> run
com.iflytek.cloud.b.b.c -> com.iflytek.cloud.b.b.c:
    char[] a -> a
com.iflytek.cloud.b.b.c$a -> com.iflytek.cloud.b.b.c$a:
    com.iflytek.cloud.b.b.c$a a -> a
    com.iflytek.cloud.b.b.c$a b -> b
    com.iflytek.cloud.b.b.c$a c -> c
    com.iflytek.cloud.b.b.c$a[] d -> d
    com.iflytek.cloud.b.b.c$a[] values() -> values
    com.iflytek.cloud.b.b.c$a valueOf(java.lang.String) -> valueOf
com.iflytek.cloud.b.b.d -> com.iflytek.cloud.b.b.d:
    android.content.Context a -> a
    java.lang.Object b -> b
    com.iflytek.cloud.c.a c -> c
    com.iflytek.cloud.b.b.a d -> d
    void a() -> a
    java.lang.String b() -> b
    boolean c() -> c
    void cancel() -> cancel
    boolean setParameter(java.lang.String,java.lang.String) -> setParameter
    java.lang.String getParameter(java.lang.String) -> getParameter
    int getSampleRate() -> getSampleRate
    boolean destroy() -> destroy
    boolean d() -> d
    void finalize() -> finalize
com.iflytek.cloud.b.b.d$a -> com.iflytek.cloud.b.b.d$a:
    com.iflytek.cloud.speech.SpeechListener b -> b
    android.os.Handler c -> c
    com.iflytek.cloud.b.b.d a -> a
    void onData(byte[]) -> onData
    void onEvent(int,android.os.Bundle) -> onEvent
    void onCompleted(com.iflytek.cloud.speech.SpeechError) -> onCompleted
    com.iflytek.cloud.speech.SpeechListener a(com.iflytek.cloud.b.b.d$a) -> a
com.iflytek.cloud.b.b.e -> com.iflytek.cloud.b.b.e:
    com.iflytek.cloud.b.b.d$a a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.iflytek.cloud.b.c.a -> com.iflytek.cloud.b.c.a:
    java.lang.Object a -> a
    com.iflytek.msc.MSCSessionInfo b -> b
    void a(android.content.Context,java.lang.String,java.lang.String,com.iflytek.cloud.b.b.a) -> a
    boolean a() -> a
    byte[] a(android.content.Context,java.lang.String,byte[],com.iflytek.cloud.b.b.a) -> a
    byte[] a(android.content.Context,com.iflytek.cloud.b.b.a) -> a
    byte[] a(android.content.Context,com.iflytek.cloud.b.b.a,java.lang.String) -> a
com.iflytek.cloud.b.c.b -> com.iflytek.cloud.b.c.b:
    java.lang.String a -> a
    com.iflytek.cloud.b.c.b$a b -> b
    byte[] c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    com.iflytek.cloud.b.c.a g -> g
    com.iflytek.cloud.speech.SpeechListener h -> h
    void a(com.iflytek.cloud.speech.SpeechListener) -> a
    void a(com.iflytek.cloud.speech.SpeechListener,java.lang.String) -> a
    void a(com.iflytek.cloud.speech.SpeechListener,java.lang.String,byte[]) -> a
    void a(com.iflytek.cloud.speech.SpeechListener,java.lang.String,java.lang.String) -> a
    void e() -> e
    void f() -> f
com.iflytek.cloud.b.c.b$a -> com.iflytek.cloud.b.c.b$a:
    com.iflytek.cloud.b.c.b$a a -> a
    com.iflytek.cloud.b.c.b$a b -> b
    com.iflytek.cloud.b.c.b$a c -> c
    com.iflytek.cloud.b.c.b$a d -> d
    com.iflytek.cloud.b.c.b$a[] e -> e
    com.iflytek.cloud.b.c.b$a[] values() -> values
    com.iflytek.cloud.b.c.b$a valueOf(java.lang.String) -> valueOf
com.iflytek.cloud.b.d.a -> com.iflytek.cloud.b.d.a:
    java.lang.String c -> c
    com.iflytek.cloud.b.d.c d -> d
    com.iflytek.cloud.b.d.b e -> e
    java.util.ArrayList f -> f
    int g -> g
    int h -> h
    long i -> i
    java.lang.StringBuilder j -> j
    boolean k -> k
    int a -> a
    int b -> b
    void a(java.lang.String,com.iflytek.cloud.b.d.b) -> a
    java.lang.String q() -> q
    void e() -> e
    void f() -> f
com.iflytek.cloud.b.d.b -> com.iflytek.cloud.b.d.b:
    void a(java.util.ArrayList,int,int,int,java.lang.String) -> a
    void a(com.iflytek.cloud.speech.SpeechError) -> a
com.iflytek.cloud.b.d.c -> com.iflytek.cloud.b.d.c:
    com.iflytek.msc.MSCSessionInfo b -> b
    int a(android.content.Context,java.lang.String,com.iflytek.cloud.b.b.a) -> a
    void a(java.lang.String) -> a
    void a(byte[]) -> a
    byte[] a() -> a
    int b() -> b
    java.lang.String c() -> c
    int b(java.lang.String) -> b
    java.lang.String c(java.lang.String) -> c
    int d(java.lang.String) -> d
    java.lang.String e(java.lang.String) -> e
    boolean d() -> d
com.iflytek.cloud.b.e.a -> com.iflytek.cloud.b.e.a:
    java.lang.String[][] a -> a
    java.lang.String[][] b -> b
    com.iflytek.cloud.c.a c -> c
    boolean d -> d
    com.iflytek.cloud.c.a a(android.content.Context) -> a
    void b(android.content.Context) -> b
    void a(com.iflytek.cloud.c.a,android.content.Context) -> a
    java.lang.String a(java.lang.String) -> a
com.iflytek.cloud.b.e.a.a -> com.iflytek.cloud.b.e.a.a:
    java.lang.String a -> a
    boolean b -> b
    void a(java.lang.String,java.lang.String) -> a
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
com.iflytek.cloud.b.e.a.b -> com.iflytek.cloud.b.e.a.b:
    java.io.RandomAccessFile a -> a
    boolean b -> b
    java.lang.Object c -> c
    boolean a() -> a
    void a(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String b(java.lang.String,java.lang.String,java.lang.String) -> b
com.iflytek.cloud.b.e.a.c -> com.iflytek.cloud.b.e.a.c:
    boolean b -> b
    java.util.HashMap a -> a
    long c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String a() -> a
    void a(java.lang.String,java.lang.String) -> a
com.iflytek.cloud.b.e.b -> com.iflytek.cloud.b.e.b:
    android.util.DisplayMetrics a -> a
    java.lang.String a(long) -> a
    java.lang.String b(long) -> b
    int a(int,int) -> a
com.iflytek.cloud.b.e.c -> com.iflytek.cloud.b.e.c:
    byte[] a(byte[]) -> a
    byte[] b(byte[]) -> b
    java.lang.String a(java.lang.String) -> a
com.iflytek.cloud.b.e.d -> com.iflytek.cloud.b.e.d:
    java.lang.String a -> a
    java.lang.String a(android.content.Context) -> a
    void a(java.lang.String) -> a
    boolean a(android.os.MemoryFile,long,java.lang.String) -> a
    byte[] b(java.lang.String) -> b
    boolean a(byte[],java.lang.String,boolean,int) -> a
    void a(java.util.concurrent.ConcurrentLinkedQueue,java.lang.String) -> a
    void c(java.lang.String) -> c
com.iflytek.cloud.b.e.e -> com.iflytek.cloud.b.e.e:
    int a -> a
    int b -> b
    boolean a(android.content.Context,java.lang.Boolean,android.media.AudioManager$OnAudioFocusChangeListener) -> a
    boolean b(android.content.Context,java.lang.Boolean,android.media.AudioManager$OnAudioFocusChangeListener) -> b
    void a(android.view.View) -> a
com.iflytek.cloud.b.e.f -> com.iflytek.cloud.b.e.f:
    int a -> a
    boolean a(android.content.Context,android.media.AudioManager$OnAudioFocusChangeListener) -> a
    boolean b(android.content.Context,android.media.AudioManager$OnAudioFocusChangeListener) -> b
    void a(android.view.View) -> a
com.iflytek.cloud.b.e.g -> com.iflytek.cloud.b.e.g:
    int a -> a
    com.iflytek.cloud.b.e.g$a b -> b
    boolean c -> c
    java.net.URL d -> d
    java.util.ArrayList e -> e
    java.lang.Object f -> f
    int g -> g
    void a(int) -> a
    void a(java.lang.String,java.lang.String,byte[]) -> a
    void a(com.iflytek.cloud.b.e.g$a) -> a
    java.net.URL a(java.lang.String,java.lang.String) -> a
    void run() -> run
    byte[] a(java.io.InputStream) -> a
    void b() -> b
    void b(byte[]) -> b
    void a(byte[]) -> a
    void a(java.lang.Exception) -> a
    int c() -> c
    void a() -> a
    boolean a(java.lang.String) -> a
com.iflytek.cloud.b.e.g$a -> com.iflytek.cloud.b.e.g$a:
    void a(com.iflytek.cloud.b.e.g,byte[]) -> a
    void a(byte[]) -> a
    void a(java.lang.Exception) -> a
com.iflytek.cloud.b.e.h -> com.iflytek.cloud.b.e.h:
    void a(android.content.Context) -> a
    java.lang.String a(android.net.NetworkInfo) -> a
    java.lang.String b(android.net.NetworkInfo) -> b
com.iflytek.cloud.c.a -> com.iflytek.cloud.c.a:
    java.util.HashMap a -> a
    void a() -> a
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    com.iflytek.cloud.c.a b() -> b
    void a(java.lang.String,java.lang.String) -> a
    void a(com.iflytek.cloud.c.a,java.lang.String) -> a
    java.util.HashMap c() -> c
    void a(java.lang.String,java.lang.String,boolean) -> a
    java.lang.Boolean c(java.lang.String) -> c
    java.lang.String toString() -> toString
    java.lang.String d(java.lang.String) -> d
    java.lang.String b(java.lang.String,java.lang.String) -> b
    int a(java.lang.String,int) -> a
    boolean a(java.lang.String,boolean) -> a
    void a(java.lang.String[][]) -> a
    void d() -> d
    java.lang.Object clone() -> clone
com.iflytek.cloud.c.b -> com.iflytek.cloud.c.b:
    java.lang.String[][] a -> a
com.iflytek.cloud.c.c -> com.iflytek.cloud.c.c:
    java.lang.String a -> a
    int b -> b
    int c -> c
    int d -> d
    java.lang.String a(android.content.Context,com.iflytek.cloud.b.b.a) -> a
    void b(com.iflytek.cloud.c.a) -> b
    boolean a(com.iflytek.cloud.c.a) -> a
    void a(android.content.Context,com.iflytek.cloud.c.a) -> a
    java.lang.String a(android.content.Context,java.lang.String,com.iflytek.cloud.b.b.a) -> a
    java.lang.String b(android.content.Context,com.iflytek.cloud.b.b.a) -> b
    java.lang.String c(android.content.Context,com.iflytek.cloud.b.b.a) -> c
    java.lang.String a(android.content.Context) -> a
    java.lang.String a() -> a
    java.lang.String b() -> b
    boolean a(java.lang.String) -> a
    java.lang.String a(int) -> a
com.iflytek.cloud.record.PcmPlayer -> com.iflytek.cloud.record.PcmPlayer:
    android.media.AudioTrack b -> b
    com.iflytek.cloud.record.a c -> c
    android.content.Context d -> d
    com.iflytek.cloud.record.PcmPlayer$b e -> e
    com.iflytek.cloud.record.PcmPlayer$a f -> f
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE g -> g
    int h -> h
    boolean i -> i
    int j -> j
    boolean k -> k
    boolean l -> l
    java.lang.Object m -> m
    android.media.AudioManager$OnAudioFocusChangeListener a -> a
    int n -> n
    android.os.Handler o -> o
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE a() -> a
    void a(com.iflytek.cloud.record.PcmPlayer$PLAY_STATE) -> a
    void f() -> f
    void b() -> b
    void g() -> g
    boolean c() -> c
    boolean a(com.iflytek.cloud.record.a,com.iflytek.cloud.record.PcmPlayer$a) -> a
    boolean b(com.iflytek.cloud.record.a,com.iflytek.cloud.record.PcmPlayer$a) -> b
    boolean d() -> d
    void e() -> e
    boolean a(com.iflytek.cloud.record.PcmPlayer,boolean) -> a
    com.iflytek.cloud.record.PcmPlayer$a a(com.iflytek.cloud.record.PcmPlayer) -> a
    boolean b(com.iflytek.cloud.record.PcmPlayer) -> b
    boolean c(com.iflytek.cloud.record.PcmPlayer) -> c
    android.content.Context d(com.iflytek.cloud.record.PcmPlayer) -> d
    boolean e(com.iflytek.cloud.record.PcmPlayer) -> e
    com.iflytek.cloud.record.a f(com.iflytek.cloud.record.PcmPlayer) -> f
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE g(com.iflytek.cloud.record.PcmPlayer) -> g
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE a(com.iflytek.cloud.record.PcmPlayer,com.iflytek.cloud.record.PcmPlayer$PLAY_STATE) -> a
    void h(com.iflytek.cloud.record.PcmPlayer) -> h
    android.os.Handler i(com.iflytek.cloud.record.PcmPlayer) -> i
    int a(com.iflytek.cloud.record.PcmPlayer,int) -> a
    android.media.AudioTrack j(com.iflytek.cloud.record.PcmPlayer) -> j
    int k(com.iflytek.cloud.record.PcmPlayer) -> k
    android.media.AudioTrack a(com.iflytek.cloud.record.PcmPlayer,android.media.AudioTrack) -> a
    com.iflytek.cloud.record.PcmPlayer$b a(com.iflytek.cloud.record.PcmPlayer,com.iflytek.cloud.record.PcmPlayer$b) -> a
    com.iflytek.cloud.record.PcmPlayer$a a(com.iflytek.cloud.record.PcmPlayer,com.iflytek.cloud.record.PcmPlayer$a) -> a
    int l(com.iflytek.cloud.record.PcmPlayer) -> l
com.iflytek.cloud.record.PcmPlayer$PLAY_STATE -> com.iflytek.cloud.record.PcmPlayer$PLAY_STATE:
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE INIT -> INIT
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE BUFFERING -> BUFFERING
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE PLAYING -> PLAYING
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE PAUSED -> PAUSED
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE STOPED -> STOPED
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE[] a -> a
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE[] values() -> values
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE valueOf(java.lang.String) -> valueOf
com.iflytek.cloud.record.PcmPlayer$a -> com.iflytek.cloud.record.PcmPlayer$a:
    void a(com.iflytek.cloud.speech.SpeechError) -> a
    void a() -> a
    void b() -> b
    void a(int,int,int) -> a
    void c() -> c
com.iflytek.cloud.record.PcmPlayer$b -> com.iflytek.cloud.record.PcmPlayer$b:
    com.iflytek.cloud.record.PcmPlayer a -> a
    void run() -> run
com.iflytek.cloud.record.a -> com.iflytek.cloud.record.a:
    int a -> a
    java.util.ArrayList b -> b
    android.content.Context c -> c
    int d -> d
    int e -> e
    android.os.MemoryFile f -> f
    long g -> g
    int h -> h
    com.iflytek.cloud.record.a$a i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    void a(java.lang.String) -> a
    int a() -> a
    void a(java.util.ArrayList,int,int,int) -> a
    boolean b() -> b
    boolean a(int) -> a
    void a(byte[]) -> a
    java.lang.String i() -> i
    void c() -> c
    int d() -> d
    com.iflytek.cloud.record.a$a e() -> e
    boolean f() -> f
    boolean g() -> g
    void a(android.media.AudioTrack,int) -> a
    void b(android.media.AudioTrack,int) -> b
    void h() -> h
    void finalize() -> finalize
com.iflytek.cloud.record.a$a -> com.iflytek.cloud.record.a$a:
    long a -> a
    long b -> b
    int c -> c
    int d -> d
    com.iflytek.cloud.record.a e -> e
com.iflytek.cloud.record.b -> com.iflytek.cloud.record.b:
    com.iflytek.cloud.record.PcmPlayer a -> a
    void onAudioFocusChange(int) -> onAudioFocusChange
com.iflytek.cloud.record.c -> com.iflytek.cloud.record.c:
    com.iflytek.cloud.record.PcmPlayer a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.iflytek.cloud.record.d -> com.iflytek.cloud.record.d:
    short a -> a
    byte[] b -> b
    android.media.AudioRecord c -> c
    com.iflytek.cloud.record.d$a d -> d
    com.iflytek.cloud.record.d$a e -> e
    boolean f -> f
    int g -> g
    int h -> h
    int i -> i
    int j -> j
    void a(short,int,int) -> a
    int b() -> b
    void a() -> a
    void a(com.iflytek.cloud.record.d$a) -> a
    void run() -> run
    void finalize() -> finalize
    void c() -> c
com.iflytek.cloud.record.d$a -> com.iflytek.cloud.record.d$a:
    void a(byte[],int,int) -> a
    void a(com.iflytek.cloud.speech.SpeechError) -> a
    void c(boolean) -> c
    void o() -> o
com.iflytek.cloud.resource.Resource -> com.iflytek.cloud.resource.Resource:
    java.util.Locale a -> a
    int TEXT_POWER_LINK -> TEXT_POWER_LINK
    int TEXT_HELP_LINK -> TEXT_HELP_LINK
    int TEXT_KNOW -> TEXT_KNOW
    int TEXT_DETAIL -> TEXT_DETAIL
    int TEXT_CANCEL -> TEXT_CANCEL
    int TEXT_STOP -> TEXT_STOP
    int TEXT_SET -> TEXT_SET
    int TEXT_MORE -> TEXT_MORE
    int TEXT_RETRY -> TEXT_RETRY
    int TEXT_AGAIN -> TEXT_AGAIN
    int TEXT_PLAYBACK -> TEXT_PLAYBACK
    int TEXT_RETRIEVE -> TEXT_RETRIEVE
    int TEXT_HELP_SMS -> TEXT_HELP_SMS
    int TEXT_HELP_RECO -> TEXT_HELP_RECO
    int TITLE_HELP -> TITLE_HELP
    int TITLE_CONNECTING -> TITLE_CONNECTING
    int TITLE_RECORDING -> TITLE_RECORDING
    int TITLE_RECOGNIZE_WAITING -> TITLE_RECOGNIZE_WAITING
    int TITLE_AUDIO_REQUEST -> TITLE_AUDIO_REQUEST
    int TITLE_ERROR -> TITLE_ERROR
    int TITLE_AUDIO_PLAYING -> TITLE_AUDIO_PLAYING
    int TITLE_DATA_UPLOAD -> TITLE_DATA_UPLOAD
    int TAG_ERROR_CODE -> TAG_ERROR_CODE
    int TAG_ERROR_UNKNOWN -> TAG_ERROR_UNKNOWN
    void setUILanguage(java.util.Locale) -> setUILanguage
    java.lang.String getLanguage() -> getLanguage
    boolean matchLanguage(java.lang.String) -> matchLanguage
    boolean a(java.lang.String) -> a
    void setTitle(int,java.lang.String) -> setTitle
    java.lang.String getTitle(int) -> getTitle
    java.lang.String getText(int) -> getText
    void setText(int,java.lang.String) -> setText
    java.lang.String getErrorDescription(int) -> getErrorDescription
    void setErrorDescription(int,java.lang.String) -> setErrorDescription
    java.lang.String getErrorTag(int) -> getErrorTag
com.iflytek.cloud.resource.a -> com.iflytek.cloud.resource.a:
    java.lang.String[] a -> a
    java.lang.String[] b -> b
    java.lang.String[] c -> c
    java.lang.String[] d -> d
com.iflytek.cloud.resource.b -> com.iflytek.cloud.resource.b:
    java.lang.String[] a -> a
    java.lang.String[] b -> b
    java.lang.String[] c -> c
    java.lang.String[] d -> d
com.iflytek.cloud.resource.c -> com.iflytek.cloud.resource.c:
    java.lang.String[] a -> a
    java.lang.String[] b -> b
    java.lang.String[] c -> c
    java.lang.String[] d -> d
com.iflytek.cloud.speech.DataDownloader -> com.iflytek.cloud.speech.DataDownloader:
    void downloadData(com.iflytek.cloud.speech.SpeechListener) -> downloadData
    boolean d() -> d
com.iflytek.cloud.speech.DataUploader -> com.iflytek.cloud.speech.DataUploader:
    void uploadData(com.iflytek.cloud.speech.SpeechListener,java.lang.String,byte[]) -> uploadData
    boolean d() -> d
com.iflytek.cloud.speech.ErrorCode -> com.iflytek.cloud.speech.ErrorCode:
    int MSP_ERROR_NET_END -> MSP_ERROR_NET_END
    int MSP_ERROR_LOGIN_END -> MSP_ERROR_LOGIN_END
    int MSP_SUCCESS -> MSP_SUCCESS
    int MSP_ERROR_FAIL -> MSP_ERROR_FAIL
    int MSP_ERROR_EXCEPTION -> MSP_ERROR_EXCEPTION
    int MSP_ERROR_GENERAL -> MSP_ERROR_GENERAL
    int MSP_ERROR_OUT_OF_MEMORY -> MSP_ERROR_OUT_OF_MEMORY
    int MSP_ERROR_FILE_NOT_FOUND -> MSP_ERROR_FILE_NOT_FOUND
    int MSP_ERROR_NOT_SUPPORT -> MSP_ERROR_NOT_SUPPORT
    int MSP_ERROR_NOT_IMPLEMENT -> MSP_ERROR_NOT_IMPLEMENT
    int MSP_ERROR_ACCESS -> MSP_ERROR_ACCESS
    int MSP_ERROR_INVALID_PARA -> MSP_ERROR_INVALID_PARA
    int MSP_ERROR_INVALID_PARA_VALUE -> MSP_ERROR_INVALID_PARA_VALUE
    int MSP_ERROR_INVALID_HANDLE -> MSP_ERROR_INVALID_HANDLE
    int MSP_ERROR_INVALID_DATA -> MSP_ERROR_INVALID_DATA
    int MSP_ERROR_NO_LICENSE -> MSP_ERROR_NO_LICENSE
    int MSP_ERROR_NOT_INIT -> MSP_ERROR_NOT_INIT
    int MSP_ERROR_NULL_HANDLE -> MSP_ERROR_NULL_HANDLE
    int MSP_ERROR_OVERFLOW -> MSP_ERROR_OVERFLOW
    int MSP_ERROR_TIME_OUT -> MSP_ERROR_TIME_OUT
    int MSP_ERROR_OPEN_FILE -> MSP_ERROR_OPEN_FILE
    int MSP_ERROR_NOT_FOUND -> MSP_ERROR_NOT_FOUND
    int MSP_ERROR_NO_ENOUGH_BUFFER -> MSP_ERROR_NO_ENOUGH_BUFFER
    int MSP_ERROR_NO_DATA -> MSP_ERROR_NO_DATA
    int MSP_ERROR_NO_MORE_DATA -> MSP_ERROR_NO_MORE_DATA
    int MSP_ERROR_SKIPPED -> MSP_ERROR_SKIPPED
    int MSP_ERROR_ALREADY_EXIST -> MSP_ERROR_ALREADY_EXIST
    int MSP_ERROR_LOAD_MODULE -> MSP_ERROR_LOAD_MODULE
    int MSP_ERROR_BUSY -> MSP_ERROR_BUSY
    int MSP_ERROR_INVALID_CONFIG -> MSP_ERROR_INVALID_CONFIG
    int MSP_ERROR_VERSION_CHECK -> MSP_ERROR_VERSION_CHECK
    int MSP_ERROR_CANCELED -> MSP_ERROR_CANCELED
    int MSP_ERROR_INVALID_MEDIA_TYPE -> MSP_ERROR_INVALID_MEDIA_TYPE
    int MSP_ERROR_CONFIG_INITIALIZE -> MSP_ERROR_CONFIG_INITIALIZE
    int MSP_ERROR_CREATE_HANDLE -> MSP_ERROR_CREATE_HANDLE
    int MSP_ERROR_CODING_LIB_NOT_LOAD -> MSP_ERROR_CODING_LIB_NOT_LOAD
    int MSP_ERROR_USER_CANCELLED -> MSP_ERROR_USER_CANCELLED
    int MSP_ERROR_INVALID_OPERATION -> MSP_ERROR_INVALID_OPERATION
    int MSP_ERROR_NET_GENERAL -> MSP_ERROR_NET_GENERAL
    int MSP_ERROR_NET_OPENSOCK -> MSP_ERROR_NET_OPENSOCK
    int MSP_ERROR_NET_CONNECTSOCK -> MSP_ERROR_NET_CONNECTSOCK
    int MSP_ERROR_NET_ACCEPTSOCK -> MSP_ERROR_NET_ACCEPTSOCK
    int MSP_ERROR_NET_SENDSOCK -> MSP_ERROR_NET_SENDSOCK
    int MSP_ERROR_NET_RECVSOCK -> MSP_ERROR_NET_RECVSOCK
    int MSP_ERROR_NET_INVALIDSOCK -> MSP_ERROR_NET_INVALIDSOCK
    int MSP_ERROR_NET_BADADDRESS -> MSP_ERROR_NET_BADADDRESS
    int MSP_ERROR_NET_BINDSEQUENCE -> MSP_ERROR_NET_BINDSEQUENCE
    int MSP_ERROR_NET_NOTOPENSOCK -> MSP_ERROR_NET_NOTOPENSOCK
    int MSP_ERROR_NET_NOTBIND -> MSP_ERROR_NET_NOTBIND
    int MSP_ERROR_NET_NOTLISTEN -> MSP_ERROR_NET_NOTLISTEN
    int MSP_ERROR_NET_CONNECTCLOSE -> MSP_ERROR_NET_CONNECTCLOSE
    int MSP_ERROR_NET_NOTDGRAMSOCK -> MSP_ERROR_NET_NOTDGRAMSOCK
    int MSP_ERROR_NET_DNS -> MSP_ERROR_NET_DNS
    int MSP_ERROR_NET_INIT -> MSP_ERROR_NET_INIT
    int MSP_ERROR_MSG_GENERAL -> MSP_ERROR_MSG_GENERAL
    int MSP_ERROR_MSG_PARSE_ERROR -> MSP_ERROR_MSG_PARSE_ERROR
    int MSP_ERROR_MSG_BUILD_ERROR -> MSP_ERROR_MSG_BUILD_ERROR
    int MSP_ERROR_MSG_PARAM_ERROR -> MSP_ERROR_MSG_PARAM_ERROR
    int MSP_ERROR_MSG_CONTENT_EMPTY -> MSP_ERROR_MSG_CONTENT_EMPTY
    int MSP_ERROR_MSG_INVALID_CONTENT_TYPE -> MSP_ERROR_MSG_INVALID_CONTENT_TYPE
    int MSP_ERROR_MSG_INVALID_CONTENT_LENGTH -> MSP_ERROR_MSG_INVALID_CONTENT_LENGTH
    int MSP_ERROR_MSG_INVALID_CONTENT_ENCODE -> MSP_ERROR_MSG_INVALID_CONTENT_ENCODE
    int MSP_ERROR_MSG_INVALID_KEY -> MSP_ERROR_MSG_INVALID_KEY
    int MSP_ERROR_MSG_KEY_EMPTY -> MSP_ERROR_MSG_KEY_EMPTY
    int MSP_ERROR_MSG_SESSION_ID_EMPTY -> MSP_ERROR_MSG_SESSION_ID_EMPTY
    int MSP_ERROR_MSG_LOGIN_ID_EMPTY -> MSP_ERROR_MSG_LOGIN_ID_EMPTY
    int MSP_ERROR_MSG_SYNC_ID_EMPTY -> MSP_ERROR_MSG_SYNC_ID_EMPTY
    int MSP_ERROR_MSG_APP_ID_EMPTY -> MSP_ERROR_MSG_APP_ID_EMPTY
    int MSP_ERROR_MSG_EXTERN_ID_EMPTY -> MSP_ERROR_MSG_EXTERN_ID_EMPTY
    int MSP_ERROR_MSG_INVALID_CMD -> MSP_ERROR_MSG_INVALID_CMD
    int MSP_ERROR_MSG_INVALID_SUBJECT -> MSP_ERROR_MSG_INVALID_SUBJECT
    int MSP_ERROR_MSG_INVALID_VERSION -> MSP_ERROR_MSG_INVALID_VERSION
    int MSP_ERROR_MSG_NO_CMD -> MSP_ERROR_MSG_NO_CMD
    int MSP_ERROR_MSG_NO_SUBJECT -> MSP_ERROR_MSG_NO_SUBJECT
    int MSP_ERROR_MSG_NO_VERSION -> MSP_ERROR_MSG_NO_VERSION
    int MSP_ERROR_MSG_MSSP_EMPTY -> MSP_ERROR_MSG_MSSP_EMPTY
    int MSP_ERROR_MSG_NEW_RESPONSE -> MSP_ERROR_MSG_NEW_RESPONSE
    int MSP_ERROR_MSG_NEW_CONTENT -> MSP_ERROR_MSG_NEW_CONTENT
    int MSP_ERROR_MSG_INVALID_SESSION_ID -> MSP_ERROR_MSG_INVALID_SESSION_ID
    int MSP_ERROR_MSG_INVALID_CONTENT -> MSP_ERROR_MSG_INVALID_CONTENT
    int MSP_ERROR_DB_GENERAL -> MSP_ERROR_DB_GENERAL
    int MSP_ERROR_DB_EXCEPTION -> MSP_ERROR_DB_EXCEPTION
    int MSP_ERROR_DB_NO_RESULT -> MSP_ERROR_DB_NO_RESULT
    int MSP_ERROR_DB_INVALID_USER -> MSP_ERROR_DB_INVALID_USER
    int MSP_ERROR_DB_INVALID_PWD -> MSP_ERROR_DB_INVALID_PWD
    int MSP_ERROR_DB_CONNECT -> MSP_ERROR_DB_CONNECT
    int MSP_ERROR_DB_INVALID_SQL -> MSP_ERROR_DB_INVALID_SQL
    int MSP_ERROR_DB_INVALID_APPID -> MSP_ERROR_DB_INVALID_APPID
    int MSP_ERROR_RES_GENERAL -> MSP_ERROR_RES_GENERAL
    int MSP_ERROR_RES_LOAD -> MSP_ERROR_RES_LOAD
    int MSP_ERROR_RES_FREE -> MSP_ERROR_RES_FREE
    int MSP_ERROR_RES_MISSING -> MSP_ERROR_RES_MISSING
    int MSP_ERROR_RES_INVALID_NAME -> MSP_ERROR_RES_INVALID_NAME
    int MSP_ERROR_RES_INVALID_ID -> MSP_ERROR_RES_INVALID_ID
    int MSP_ERROR_RES_INVALID_IMG -> MSP_ERROR_RES_INVALID_IMG
    int MSP_ERROR_RES_WRITE -> MSP_ERROR_RES_WRITE
    int MSP_ERROR_RES_LEAK -> MSP_ERROR_RES_LEAK
    int MSP_ERROR_RES_HEAD -> MSP_ERROR_RES_HEAD
    int MSP_ERROR_RES_DATA -> MSP_ERROR_RES_DATA
    int MSP_ERROR_RES_SKIP -> MSP_ERROR_RES_SKIP
    int MSP_ERROR_TTS_GENERAL -> MSP_ERROR_TTS_GENERAL
    int MSP_ERROR_TTS_TEXTEND -> MSP_ERROR_TTS_TEXTEND
    int MSP_ERROR_TTS_TEXT_EMPTY -> MSP_ERROR_TTS_TEXT_EMPTY
    int MSP_ERROR_REC_GENERAL -> MSP_ERROR_REC_GENERAL
    int MSP_ERROR_REC_INACTIVE -> MSP_ERROR_REC_INACTIVE
    int MSP_ERROR_REC_GRAMMAR_ERROR -> MSP_ERROR_REC_GRAMMAR_ERROR
    int MSP_ERROR_REC_NO_ACTIVE_GRAMMARS -> MSP_ERROR_REC_NO_ACTIVE_GRAMMARS
    int MSP_ERROR_REC_DUPLICATE_GRAMMAR -> MSP_ERROR_REC_DUPLICATE_GRAMMAR
    int MSP_ERROR_REC_INVALID_MEDIA_TYPE -> MSP_ERROR_REC_INVALID_MEDIA_TYPE
    int MSP_ERROR_REC_INVALID_LANGUAGE -> MSP_ERROR_REC_INVALID_LANGUAGE
    int MSP_ERROR_REC_URI_NOT_FOUND -> MSP_ERROR_REC_URI_NOT_FOUND
    int MSP_ERROR_REC_URI_TIMEOUT -> MSP_ERROR_REC_URI_TIMEOUT
    int MSP_ERROR_REC_URI_FETCH_ERROR -> MSP_ERROR_REC_URI_FETCH_ERROR
    int MSP_ERROR_EP_GENERAL -> MSP_ERROR_EP_GENERAL
    int MSP_ERROR_EP_NO_SESSION_NAME -> MSP_ERROR_EP_NO_SESSION_NAME
    int MSP_ERROR_EP_INACTIVE -> MSP_ERROR_EP_INACTIVE
    int MSP_ERROR_EP_INITIALIZED -> MSP_ERROR_EP_INITIALIZED
    int MSP_ERROR_TUV_GENERAL -> MSP_ERROR_TUV_GENERAL
    int MSP_ERROR_TUV_GETHIDPARAM -> MSP_ERROR_TUV_GETHIDPARAM
    int MSP_ERROR_TUV_TOKEN -> MSP_ERROR_TUV_TOKEN
    int MSP_ERROR_TUV_CFGFILE -> MSP_ERROR_TUV_CFGFILE
    int MSP_ERROR_TUV_RECV_CONTENT -> MSP_ERROR_TUV_RECV_CONTENT
    int MSP_ERROR_TUV_VERFAIL -> MSP_ERROR_TUV_VERFAIL
    int MSP_ERROR_LOGIN_SUCCESS -> MSP_ERROR_LOGIN_SUCCESS
    int MSP_ERROR_LOGIN_NO_LICENSE -> MSP_ERROR_LOGIN_NO_LICENSE
    int MSP_ERROR_LOGIN_SESSIONID_INVALID -> MSP_ERROR_LOGIN_SESSIONID_INVALID
    int MSP_ERROR_LOGIN_SESSIONID_ERROR -> MSP_ERROR_LOGIN_SESSIONID_ERROR
    int MSP_ERROR_LOGIN_UNLOGIN -> MSP_ERROR_LOGIN_UNLOGIN
    int MSP_ERROR_LOGIN_INVALID_USER -> MSP_ERROR_LOGIN_INVALID_USER
    int MSP_ERROR_LOGIN_INVALID_PWD -> MSP_ERROR_LOGIN_INVALID_PWD
    int MSP_ERROR_LOGIN_SYSTEM_ERROR -> MSP_ERROR_LOGIN_SYSTEM_ERROR
    int MSP_ERROR_HCR_GENERAL -> MSP_ERROR_HCR_GENERAL
    int MSP_ERROR_HCR_RESOURCE_NOT_EXIST -> MSP_ERROR_HCR_RESOURCE_NOT_EXIST
    int MSP_ERROR_HCR_CREATE -> MSP_ERROR_HCR_CREATE
    int MSP_ERROR_HCR_DESTROY -> MSP_ERROR_HCR_DESTROY
    int MSP_ERROR_HCR_START -> MSP_ERROR_HCR_START
    int MSP_ERROR_HCR_APPEND_STROKES -> MSP_ERROR_HCR_APPEND_STROKES
    int MSP_ERROR_HCR_GET_RESULT -> MSP_ERROR_HCR_GET_RESULT
    int MSP_ERROR_HCR_SET_PREDICT_DATA -> MSP_ERROR_HCR_SET_PREDICT_DATA
    int MSP_ERROR_HCR_GET_PREDICT_RESULT -> MSP_ERROR_HCR_GET_PREDICT_RESULT
    int MSP_ERROR_HCR_GETRESULT -> MSP_ERROR_HCR_GETRESULT
    int MSP_ERROR_HCR_RESOURCE -> MSP_ERROR_HCR_RESOURCE
    int MSP_ERROR_AUTH_NO_LICENSE -> MSP_ERROR_AUTH_NO_LICENSE
    int MSP_ERROR_AUTH_NO_ENOUGH_LICENSE -> MSP_ERROR_AUTH_NO_ENOUGH_LICENSE
    int MSP_ERROR_AUTH_INVALID_LICENSE -> MSP_ERROR_AUTH_INVALID_LICENSE
    int MSP_ERROR_AUTH_LICENSE_EXPIRED -> MSP_ERROR_AUTH_LICENSE_EXPIRED
    int MSP_ERROR_AUTH_NEED_MORE_DATA -> MSP_ERROR_AUTH_NEED_MORE_DATA
    int MSP_ERROR_AUTH_LICENSE_TO_BE_EXPIRED -> MSP_ERROR_AUTH_LICENSE_TO_BE_EXPIRED
    int MSP_ERROR_HTTP_BASE -> MSP_ERROR_HTTP_BASE
    int MSP_ERROR_ISV_NO_USER -> MSP_ERROR_ISV_NO_USER
    int MSP_ERROR_LUA_BASE -> MSP_ERROR_LUA_BASE
    int MSP_ERROR_LUA_YIELD -> MSP_ERROR_LUA_YIELD
    int MSP_ERROR_LUA_ERRRUN -> MSP_ERROR_LUA_ERRRUN
    int MSP_ERROR_LUA_ERRSYNTAX -> MSP_ERROR_LUA_ERRSYNTAX
    int MSP_ERROR_LUA_ERRMEM -> MSP_ERROR_LUA_ERRMEM
    int MSP_ERROR_LUA_ERRERR -> MSP_ERROR_LUA_ERRERR
    int MSP_ERROR_LUA_INVALID_PARAM -> MSP_ERROR_LUA_INVALID_PARAM
    int MSP_ERROR_MMP_BASE -> MSP_ERROR_MMP_BASE
    int MSP_ERROR_MMP_MYSQL_INITFAIL -> MSP_ERROR_MMP_MYSQL_INITFAIL
    int MSP_ERROR_MMP_REDIS_INITFAIL -> MSP_ERROR_MMP_REDIS_INITFAIL
    int MSP_ERROR_MMP_NETDSS_INITFAIL -> MSP_ERROR_MMP_NETDSS_INITFAIL
    int MSP_ERROR_MMP_TAIR_INITFAIL -> MSP_ERROR_MMP_TAIR_INITFAIL
    int MSP_ERROR_MMP_MAIL_SESSION_FAIL -> MSP_ERROR_MMP_MAIL_SESSION_FAIL
    int MSP_ERROR_MMP_MAIL_LOGON_FAIL -> MSP_ERROR_MMP_MAIL_LOGON_FAIL
    int MSP_ERROR_MMP_MAIL_USER_ILLEGAL -> MSP_ERROR_MMP_MAIL_USER_ILLEGAL
    int MSP_ERROR_MMP_MAIL_PWD_ERR -> MSP_ERROR_MMP_MAIL_PWD_ERR
    int MSP_ERROR_MMP_MAIL_SOCKET_ERR -> MSP_ERROR_MMP_MAIL_SOCKET_ERR
    int MSP_ERROR_MMP_MAIL_INIT_FAIL -> MSP_ERROR_MMP_MAIL_INIT_FAIL
    int MSP_ERROR_MMP_STORE_MNR_NO_INIT -> MSP_ERROR_MMP_STORE_MNR_NO_INIT
    int MSP_ERROR_MMP_STORE_MNR_POOL_FULL -> MSP_ERROR_MMP_STORE_MNR_POOL_FULL
    int MSP_ERROR_MMP_STRATGY_PARAM_ILLEGAL -> MSP_ERROR_MMP_STRATGY_PARAM_ILLEGAL
    int MSP_ERROR_MMP_STRATGY_PARAM_TOOLOOG -> MSP_ERROR_MMP_STRATGY_PARAM_TOOLOOG
    int MSP_ERROR_MMP_PARAM_NULL -> MSP_ERROR_MMP_PARAM_NULL
    int MSP_ERROR_MMP_ERR_MORE_TOTAL -> MSP_ERROR_MMP_ERR_MORE_TOTAL
    int MSP_ERROR_MMP_PROC_THRESHOLD -> MSP_ERROR_MMP_PROC_THRESHOLD
    int MSP_ERROR_MMP_SERVER_THRESHOLD -> MSP_ERROR_MMP_SERVER_THRESHOLD
    int MSP_ERROR_MMP_PYTHON_NO_EXIST -> MSP_ERROR_MMP_PYTHON_NO_EXIST
    int MSP_ERROR_MMP_PYTHON_IMPORT_FAILED -> MSP_ERROR_MMP_PYTHON_IMPORT_FAILED
    int MSP_ERROR_MMP_PYTHON_BAD_FUNC -> MSP_ERROR_MMP_PYTHON_BAD_FUNC
    int MSP_ERROR_MMP_DB_DATA_ILLEGAL -> MSP_ERROR_MMP_DB_DATA_ILLEGAL
    int MSP_ERROR_MMP_REDIS_NOT_CONN -> MSP_ERROR_MMP_REDIS_NOT_CONN
    int MSP_ERROR_MMP_PMA_NOT_FOUND_STRATEGY -> MSP_ERROR_MMP_PMA_NOT_FOUND_STRATEGY
    int MSP_ERROR_MMP_TAIR_CONNECT -> MSP_ERROR_MMP_TAIR_CONNECT
    int MSP_ERROR_MMP_PMC_SERVINFO_INVALID -> MSP_ERROR_MMP_PMC_SERVINFO_INVALID
    int MSP_ERROR_MMP_ALARM_GROUP_NULL -> MSP_ERROR_MMP_ALARM_GROUP_NULL
    int MSP_ERROR_MMP_ALARM_CONTXT_NULL -> MSP_ERROR_MMP_ALARM_CONTXT_NULL
    int MSP_ERROR_LMOD_BASE -> MSP_ERROR_LMOD_BASE
    int MSP_ERROR_LMOD_NOT_FOUND -> MSP_ERROR_LMOD_NOT_FOUND
    int MSP_ERROR_LMOD_UNEXPECTED_BIN -> MSP_ERROR_LMOD_UNEXPECTED_BIN
    int MSP_ERROR_LMOD_LOADCODE -> MSP_ERROR_LMOD_LOADCODE
    int MSP_ERROR_LMOD_PRECALL -> MSP_ERROR_LMOD_PRECALL
    int MSP_ERROR_LMOD_RUNTIME_EXCEPTION -> MSP_ERROR_LMOD_RUNTIME_EXCEPTION
    int MSP_ERROR_LMOD_ALREADY_LOADED -> MSP_ERROR_LMOD_ALREADY_LOADED
    int ERROR_UNKNOWN -> ERROR_UNKNOWN
    int ERROR_NO_NETWORK -> ERROR_NO_NETWORK
    int ERROR_NETWORK_TIMEOUT -> ERROR_NETWORK_TIMEOUT
    int ERROR_NET_EXPECTION -> ERROR_NET_EXPECTION
    int ERROR_INVALID_RESULT -> ERROR_INVALID_RESULT
    int ERROR_NO_MATCH -> ERROR_NO_MATCH
    int ERROR_AUDIO_RECORD -> ERROR_AUDIO_RECORD
    int ERROR_NO_SPPECH -> ERROR_NO_SPPECH
    int ERROR_SPEECH_TIMEOUT -> ERROR_SPEECH_TIMEOUT
    int ERROR_EMPTY_UTTERANCE -> ERROR_EMPTY_UTTERANCE
    int ERROR_FILE_ACCESS -> ERROR_FILE_ACCESS
    int ERROR_PLAY_MEDIA -> ERROR_PLAY_MEDIA
    int ERROR_INVALID_PARAM -> ERROR_INVALID_PARAM
    int ERROR_TEXT_OVERFLOW -> ERROR_TEXT_OVERFLOW
    int ERROR_INVALID_DATA -> ERROR_INVALID_DATA
    int ERROR_LOGIN -> ERROR_LOGIN
    int ERROR_PERMISSION_DENIED -> ERROR_PERMISSION_DENIED
    int ERROR_INTERRUPT -> ERROR_INTERRUPT
    int ERROR_VERSION_LOWER -> ERROR_VERSION_LOWER
    int ERROR_COMPONENT_NOT_INSTALLED -> ERROR_COMPONENT_NOT_INSTALLED
    int ERROR_ENGINE_NOT_SUPPORTED -> ERROR_ENGINE_NOT_SUPPORTED
    int ERROR_ENGINE_INIT_FAIL -> ERROR_ENGINE_INIT_FAIL
    int ERROR_ENGINE_CALL_FAIL -> ERROR_ENGINE_CALL_FAIL
    int ERROR_ENGINE_BUSY -> ERROR_ENGINE_BUSY
    int ERROR_LOCAL_NO_INIT -> ERROR_LOCAL_NO_INIT
    int ERROR_LOCAL_RESOURCE -> ERROR_LOCAL_RESOURCE
    int ERROR_LOCAL_ENGINE -> ERROR_LOCAL_ENGINE
    int ERROR_IVW_INTERRUPT -> ERROR_IVW_INTERRUPT
com.iflytek.cloud.speech.RecognizerListener -> com.iflytek.cloud.speech.RecognizerListener:
    void onVolumeChanged(int) -> onVolumeChanged
    void onBeginOfSpeech() -> onBeginOfSpeech
    void onEndOfSpeech() -> onEndOfSpeech
    void onResult(com.iflytek.cloud.speech.RecognizerResult,boolean) -> onResult
    void onError(com.iflytek.cloud.speech.SpeechError) -> onError
    void onEvent(int,int,int,java.lang.String) -> onEvent
com.iflytek.cloud.speech.RecognizerResult -> com.iflytek.cloud.speech.RecognizerResult:
    java.lang.String a -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    java.lang.String getResultString() -> getResultString
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.iflytek.cloud.speech.SpeechConstant -> com.iflytek.cloud.speech.SpeechConstant:
    java.lang.String APPID -> APPID
    java.lang.String WAP_PROXY -> WAP_PROXY
    java.lang.String NET_TIMEOUT -> NET_TIMEOUT
    java.lang.String KEY_SPEECH_TIMEOUT -> KEY_SPEECH_TIMEOUT
    java.lang.String LANGUAGE -> LANGUAGE
    java.lang.String ACCENT -> ACCENT
    java.lang.String DOMAIN -> DOMAIN
    java.lang.String CLOUD_GRAMMAR -> CLOUD_GRAMMAR
    java.lang.String AUDIO_SOURCE -> AUDIO_SOURCE
    java.lang.String VAD_BOS -> VAD_BOS
    java.lang.String VAD_EOS -> VAD_EOS
    java.lang.String SAMPLE_RATE -> SAMPLE_RATE
    java.lang.String PARAMS -> PARAMS
    java.lang.String ASR_NBEST -> ASR_NBEST
    java.lang.String ASR_WBEST -> ASR_WBEST
    java.lang.String ASR_PTT -> ASR_PTT
    java.lang.String RESULT_TYPE -> RESULT_TYPE
    java.lang.String SEARCH_AREA -> SEARCH_AREA
    java.lang.String SCENE -> SCENE
    java.lang.String NLP_VERSION -> NLP_VERSION
    java.lang.String AUDIO_FORMAT -> AUDIO_FORMAT
    java.lang.String VOICE_NAME -> VOICE_NAME
    java.lang.String SPEED -> SPEED
    java.lang.String PITCH -> PITCH
    java.lang.String VOLUME -> VOLUME
    java.lang.String BACKGROUND_SOUND -> BACKGROUND_SOUND
    java.lang.String TTS_BUFFER_TIME -> TTS_BUFFER_TIME
    java.lang.String STREAM_TYPE -> STREAM_TYPE
    java.lang.String KEY_REQUEST_FOCUS -> KEY_REQUEST_FOCUS
    java.lang.String DATA_TYPE -> DATA_TYPE
    java.lang.String SUBJECT -> SUBJECT
    java.lang.String ASR_AUDIO_PATH -> ASR_AUDIO_PATH
    java.lang.String TTS_AUDIO_PATH -> TTS_AUDIO_PATH
com.iflytek.cloud.speech.SpeechError -> com.iflytek.cloud.speech.SpeechError:
    long serialVersionUID -> serialVersionUID
    int ERROR_INTERRUPT -> ERROR_INTERRUPT
    int a -> a
    java.lang.String b -> b
    java.lang.String toString() -> toString
    int getErrorCode() -> getErrorCode
    java.lang.String getErrorDescription() -> getErrorDescription
    java.lang.String getHtmlDescription(boolean) -> getHtmlDescription
    java.lang.String getPlainDescription(boolean) -> getPlainDescription
com.iflytek.cloud.speech.SpeechEvent -> com.iflytek.cloud.speech.SpeechEvent:
    int EVENT_NETPREF -> EVENT_NETPREF
com.iflytek.cloud.speech.SpeechListener -> com.iflytek.cloud.speech.SpeechListener:
    void onEvent(int,android.os.Bundle) -> onEvent
    void onData(byte[]) -> onData
    void onCompleted(com.iflytek.cloud.speech.SpeechError) -> onCompleted
com.iflytek.cloud.speech.SpeechRecognizer -> com.iflytek.cloud.speech.SpeechRecognizer:
    com.iflytek.cloud.speech.SpeechRecognizer e -> e
    com.iflytek.cloud.speech.SpeechRecognizer createRecognizer(android.content.Context) -> createRecognizer
    com.iflytek.cloud.speech.SpeechRecognizer getRecognizer() -> getRecognizer
    boolean d() -> d
    void startListening(com.iflytek.cloud.speech.RecognizerListener) -> startListening
    boolean writeAudio(byte[],int,int) -> writeAudio
    void stopListening() -> stopListening
    boolean isListening() -> isListening
    int getUpflowBytes(boolean) -> getUpflowBytes
    int getDownflowBytes(boolean) -> getDownflowBytes
    void cancel() -> cancel
    boolean setParameter(java.lang.String,java.lang.String) -> setParameter
    java.lang.String getParameter(java.lang.String) -> getParameter
    boolean destroy() -> destroy
com.iflytek.cloud.speech.SpeechSynthesizer -> com.iflytek.cloud.speech.SpeechSynthesizer:
    com.iflytek.cloud.speech.SpeechSynthesizer createSynthesizer(android.content.Context) -> createSynthesizer
    com.iflytek.cloud.speech.SpeechSynthesizer getSynthesizer() -> getSynthesizer
    void startSpeaking(java.lang.String,com.iflytek.cloud.speech.SynthesizerListener) -> startSpeaking
    void synthesizeToUri(java.lang.String,java.lang.String,com.iflytek.cloud.speech.SynthesizeToUriListener) -> synthesizeToUri
    void pauseSpeaking() -> pauseSpeaking
    void resumeSpeaking() -> resumeSpeaking
    void stopSpeaking() -> stopSpeaking
    boolean isSpeaking() -> isSpeaking
    void replaySpeaking() -> replaySpeaking
    int getDownflowBytes(boolean) -> getDownflowBytes
    int getUpflowBytes(boolean) -> getUpflowBytes
    boolean setParameter(java.lang.String,java.lang.String) -> setParameter
    boolean destroy() -> destroy
com.iflytek.cloud.speech.SpeechUnderstander -> com.iflytek.cloud.speech.SpeechUnderstander:
    com.iflytek.cloud.speech.SpeechUnderstander a -> a
    com.iflytek.cloud.speech.a.a b -> b
    com.iflytek.cloud.speech.SpeechUnderstander createUnderstander(android.content.Context) -> createUnderstander
    com.iflytek.cloud.speech.SpeechUnderstander getUnderstander() -> getUnderstander
    void startUnderstanding(com.iflytek.cloud.speech.SpeechUnderstanderListener) -> startUnderstanding
    boolean isUnderstanding() -> isUnderstanding
    boolean writeAudio(byte[],int,int) -> writeAudio
    void stopUnderstanding() -> stopUnderstanding
    void cancel() -> cancel
    boolean setParameter(java.lang.String,java.lang.String) -> setParameter
    java.lang.String getParameter(java.lang.String) -> getParameter
    boolean destroy() -> destroy
com.iflytek.cloud.speech.SpeechUnderstander$a -> com.iflytek.cloud.speech.SpeechUnderstander$a:
    com.iflytek.cloud.speech.SpeechUnderstanderListener b -> b
    com.iflytek.cloud.speech.SpeechUnderstander a -> a
    void onEndOfSpeech() -> onEndOfSpeech
    void onVolumeChanged(int) -> onVolumeChanged
    void onBeginOfSpeech() -> onBeginOfSpeech
    void onError(com.iflytek.cloud.speech.SpeechError) -> onError
    void onEvent(int,int,int,java.lang.String) -> onEvent
    void onResult(com.iflytek.cloud.speech.RecognizerResult,boolean) -> onResult
com.iflytek.cloud.speech.SpeechUnderstanderListener -> com.iflytek.cloud.speech.SpeechUnderstanderListener:
    void onVolumeChanged(int) -> onVolumeChanged
    void onBeginOfSpeech() -> onBeginOfSpeech
    void onEndOfSpeech() -> onEndOfSpeech
    void onResult(com.iflytek.cloud.speech.UnderstanderResult) -> onResult
    void onError(com.iflytek.cloud.speech.SpeechError) -> onError
    void onEvent(int,int,int,java.lang.String) -> onEvent
com.iflytek.cloud.speech.SpeechUser -> com.iflytek.cloud.speech.SpeechUser:
    com.iflytek.cloud.speech.SpeechUser e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    com.iflytek.cloud.c.a h -> h
    com.iflytek.cloud.speech.SpeechUser$Login_State i -> i
    com.iflytek.cloud.speech.SpeechUser getUser() -> getUser
    com.iflytek.cloud.c.a getInitParam() -> getInitParam
    void a(java.lang.String) -> a
    com.iflytek.cloud.speech.SpeechUser$Login_State getLoginState() -> getLoginState
    boolean login(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.iflytek.cloud.speech.SpeechListener) -> login
    boolean logout() -> logout
    boolean d() -> d
    com.iflytek.cloud.speech.SpeechUser$Login_State a(com.iflytek.cloud.speech.SpeechUser,com.iflytek.cloud.speech.SpeechUser$Login_State) -> a
com.iflytek.cloud.speech.SpeechUser$Login_State -> com.iflytek.cloud.speech.SpeechUser$Login_State:
    com.iflytek.cloud.speech.SpeechUser$Login_State Logined -> Logined
    com.iflytek.cloud.speech.SpeechUser$Login_State Unlogin -> Unlogin
    com.iflytek.cloud.speech.SpeechUser$Login_State[] a -> a
    com.iflytek.cloud.speech.SpeechUser$Login_State[] values() -> values
    com.iflytek.cloud.speech.SpeechUser$Login_State valueOf(java.lang.String) -> valueOf
com.iflytek.cloud.speech.SpeechUser$a -> com.iflytek.cloud.speech.SpeechUser$a:
    com.iflytek.cloud.speech.SpeechUser b -> b
    void onCompleted(com.iflytek.cloud.speech.SpeechError) -> onCompleted
com.iflytek.cloud.speech.SynthesizeToUriListener -> com.iflytek.cloud.speech.SynthesizeToUriListener:
    void onBufferProgress(int) -> onBufferProgress
    void onSynthesizeCompleted(java.lang.String,com.iflytek.cloud.speech.SpeechError) -> onSynthesizeCompleted
com.iflytek.cloud.speech.SynthesizerListener -> com.iflytek.cloud.speech.SynthesizerListener:
    void onSpeakBegin() -> onSpeakBegin
    void onBufferProgress(int,int,int,java.lang.String) -> onBufferProgress
    void onSpeakPaused() -> onSpeakPaused
    void onSpeakResumed() -> onSpeakResumed
    void onSpeakProgress(int,int,int) -> onSpeakProgress
    void onCompleted(com.iflytek.cloud.speech.SpeechError) -> onCompleted
com.iflytek.cloud.speech.TextUnderstander -> com.iflytek.cloud.speech.TextUnderstander:
    void understandText(java.lang.String,com.iflytek.cloud.speech.TextUnderstanderListener) -> understandText
    boolean isUnderstanding() -> isUnderstanding
    void cancel() -> cancel
    boolean setParameter(java.lang.String,java.lang.String) -> setParameter
    java.lang.String getParameter(java.lang.String) -> getParameter
    boolean destroy() -> destroy
com.iflytek.cloud.speech.TextUnderstander$a -> com.iflytek.cloud.speech.TextUnderstander$a:
    com.iflytek.cloud.speech.TextUnderstanderListener b -> b
    com.iflytek.cloud.speech.TextUnderstander a -> a
    void onData(byte[]) -> onData
    void onCompleted(com.iflytek.cloud.speech.SpeechError) -> onCompleted
    void onEvent(int,android.os.Bundle) -> onEvent
com.iflytek.cloud.speech.TextUnderstanderListener -> com.iflytek.cloud.speech.TextUnderstanderListener:
    void onResult(com.iflytek.cloud.speech.UnderstanderResult) -> onResult
    void onError(com.iflytek.cloud.speech.SpeechError) -> onError
com.iflytek.cloud.speech.UnderstanderResult -> com.iflytek.cloud.speech.UnderstanderResult:
    java.lang.String a -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getResultString() -> getResultString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.iflytek.cloud.speech.a -> com.iflytek.cloud.speech.a:
    com.iflytek.cloud.speech.RecognizerResult a(android.os.Parcel) -> a
    com.iflytek.cloud.speech.RecognizerResult[] a(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.iflytek.cloud.speech.a.a -> com.iflytek.cloud.speech.a.a:
    boolean e -> e
    void a(java.lang.String) -> a
    void startListening(com.iflytek.cloud.speech.RecognizerListener) -> startListening
    boolean writeAudio(byte[],int,int) -> writeAudio
    void stopListening() -> stopListening
    void cancel() -> cancel
    int getDownflowBytes(boolean) -> getDownflowBytes
    int getUpflowBytes(boolean) -> getUpflowBytes
    boolean isListening() -> isListening
    com.iflytek.cloud.b.b.a a(com.iflytek.cloud.speech.a.a) -> a
    com.iflytek.cloud.b.b.a b(com.iflytek.cloud.speech.a.a) -> b
    android.content.Context c(com.iflytek.cloud.speech.a.a) -> c
    boolean d(com.iflytek.cloud.speech.a.a) -> d
com.iflytek.cloud.speech.a.a$a -> com.iflytek.cloud.speech.a.a$a:
    com.iflytek.cloud.speech.RecognizerListener b -> b
    boolean c -> c
    android.os.Handler d -> d
    com.iflytek.cloud.speech.a.a a -> a
    void onVolumeChanged(int) -> onVolumeChanged
    void onEndOfSpeech() -> onEndOfSpeech
    void onResult(com.iflytek.cloud.speech.RecognizerResult,boolean) -> onResult
    void onBeginOfSpeech() -> onBeginOfSpeech
    void onError(com.iflytek.cloud.speech.SpeechError) -> onError
    void onEvent(int,int,int,java.lang.String) -> onEvent
    void a() -> a
    com.iflytek.cloud.speech.RecognizerListener a(com.iflytek.cloud.speech.a.a$a) -> a
    boolean b(com.iflytek.cloud.speech.a.a$a) -> b
    boolean a(com.iflytek.cloud.speech.a.a$a,boolean) -> a
com.iflytek.cloud.speech.a.b -> com.iflytek.cloud.speech.a.b:
    com.iflytek.cloud.speech.a.a$a a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.iflytek.cloud.speech.a.c -> com.iflytek.cloud.speech.a.c:
    android.content.Context e -> e
    com.iflytek.cloud.speech.a.c f -> f
    com.iflytek.cloud.speech.a.c$a g -> g
    com.iflytek.cloud.speech.a.c a(android.content.Context) -> a
    com.iflytek.cloud.speech.a.c e() -> e
    void startSpeaking(java.lang.String,com.iflytek.cloud.speech.SynthesizerListener) -> startSpeaking
    void synthesizeToUri(java.lang.String,java.lang.String,com.iflytek.cloud.speech.SynthesizeToUriListener) -> synthesizeToUri
    void pauseSpeaking() -> pauseSpeaking
    void replaySpeaking() -> replaySpeaking
    void resumeSpeaking() -> resumeSpeaking
    boolean isSpeaking() -> isSpeaking
    void stopSpeaking() -> stopSpeaking
    int getDownflowBytes(boolean) -> getDownflowBytes
    int getUpflowBytes(boolean) -> getUpflowBytes
    boolean destroy() -> destroy
com.iflytek.cloud.speech.a.c$a -> com.iflytek.cloud.speech.a.c$a:
    com.iflytek.cloud.record.PcmPlayer f -> f
    com.iflytek.cloud.record.a g -> g
    com.iflytek.cloud.speech.SynthesizerListener h -> h
    com.iflytek.cloud.speech.SynthesizeToUriListener i -> i
    int j -> j
    boolean k -> k
    com.iflytek.cloud.b.d.b l -> l
    com.iflytek.cloud.record.PcmPlayer$a m -> m
    android.os.Handler n -> n
    com.iflytek.cloud.speech.a.c e -> e
    void a(java.lang.String,com.iflytek.cloud.c.a,com.iflytek.cloud.speech.SynthesizerListener) -> a
    com.iflytek.cloud.record.PcmPlayer$PLAY_STATE e() -> e
    void f() -> f
    void g() -> g
    boolean h() -> h
    void a(boolean) -> a
    void i() -> i
    void j() -> j
    boolean destroy() -> destroy
    void a(java.lang.String,java.lang.String,com.iflytek.cloud.c.a,com.iflytek.cloud.speech.SynthesizeToUriListener) -> a
    com.iflytek.cloud.speech.SynthesizerListener a(com.iflytek.cloud.speech.a.c$a) -> a
    android.os.Handler b(com.iflytek.cloud.speech.a.c$a) -> b
    com.iflytek.cloud.record.a c(com.iflytek.cloud.speech.a.c$a) -> c
    boolean d(com.iflytek.cloud.speech.a.c$a) -> d
    int e(com.iflytek.cloud.speech.a.c$a) -> e
    boolean a(com.iflytek.cloud.speech.a.c$a,boolean) -> a
    com.iflytek.cloud.record.PcmPlayer$a f(com.iflytek.cloud.speech.a.c$a) -> f
    com.iflytek.cloud.record.PcmPlayer g(com.iflytek.cloud.speech.a.c$a) -> g
    com.iflytek.cloud.speech.SynthesizeToUriListener h(com.iflytek.cloud.speech.a.c$a) -> h
com.iflytek.cloud.speech.a.d -> com.iflytek.cloud.speech.a.d:
    com.iflytek.cloud.speech.a.c$a a -> a
    void a(java.util.ArrayList,int,int,int,java.lang.String) -> a
    void a(com.iflytek.cloud.speech.SpeechError) -> a
com.iflytek.cloud.speech.a.e -> com.iflytek.cloud.speech.a.e:
    com.iflytek.cloud.speech.a.c$a a -> a
    void a() -> a
    void b() -> b
    void a(int,int,int) -> a
    void a(com.iflytek.cloud.speech.SpeechError) -> a
    void c() -> c
com.iflytek.cloud.speech.a.f -> com.iflytek.cloud.speech.a.f:
    com.iflytek.cloud.speech.a.c$a a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.iflytek.cloud.speech.a.g -> com.iflytek.cloud.speech.a.g:
    java.lang.String a -> a
    com.iflytek.cloud.speech.a.c$a b -> b
    void handleMessage(android.os.Message) -> handleMessage
com.iflytek.cloud.speech.a.h -> com.iflytek.cloud.speech.a.h:
    android.os.Handler a -> a
    com.iflytek.cloud.speech.a.c$a b -> b
    void a(com.iflytek.cloud.speech.SpeechError) -> a
    void a(java.util.ArrayList,int,int,int,java.lang.String) -> a
com.iflytek.cloud.speech.b -> com.iflytek.cloud.speech.b:
    com.iflytek.cloud.speech.UnderstanderResult a(android.os.Parcel) -> a
    com.iflytek.cloud.speech.UnderstanderResult[] a(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.iflytek.cloud.ui.RecognizerDialog -> com.iflytek.cloud.ui.RecognizerDialog:
    void setListener(com.iflytek.cloud.ui.RecognizerDialogListener) -> setListener
    void setParameter(java.lang.String,java.lang.String) -> setParameter
    int getDownflowBytes(boolean) -> getDownflowBytes
    int getUpflowBytes(boolean) -> getUpflowBytes
    void setUILanguage(java.util.Locale) -> setUILanguage
    void show() -> show
    void dismiss() -> dismiss
com.iflytek.cloud.ui.RecognizerDialogListener -> com.iflytek.cloud.ui.RecognizerDialogListener:
    void onResult(com.iflytek.cloud.speech.RecognizerResult,boolean) -> onResult
    void onError(com.iflytek.cloud.speech.SpeechError) -> onError
com.iflytek.cloud.ui.a -> com.iflytek.cloud.ui.a:
    android.widget.LinearLayout d -> d
    com.iflytek.cloud.ui.a.f e -> e
    android.view.animation.RotateAnimation f -> f
    com.iflytek.cloud.speech.SpeechRecognizer g -> g
    com.iflytek.cloud.ui.RecognizerDialogListener h -> h
    long i -> i
    int a -> a
    com.iflytek.cloud.speech.RecognizerListener j -> j
    int k -> k
    void a() -> a
    void a(com.iflytek.cloud.ui.RecognizerDialogListener) -> a
    void a(java.lang.String,java.lang.String) -> a
    void g() -> g
    void h() -> h
    void i() -> i
    void j() -> j
    void a(com.iflytek.cloud.speech.SpeechError) -> a
    void a(android.widget.TextView,com.iflytek.cloud.speech.SpeechError) -> a
    void k() -> k
    void onClick(android.view.View) -> onClick
    void b() -> b
    void c() -> c
    int a(boolean) -> a
    int b(boolean) -> b
    boolean d() -> d
    int a(com.iflytek.cloud.ui.a) -> a
    com.iflytek.cloud.ui.a.f b(com.iflytek.cloud.ui.a) -> b
    void c(com.iflytek.cloud.ui.a) -> c
    com.iflytek.cloud.ui.RecognizerDialogListener d(com.iflytek.cloud.ui.a) -> d
    boolean e(com.iflytek.cloud.ui.a) -> e
    void a(com.iflytek.cloud.ui.a,com.iflytek.cloud.speech.SpeechError) -> a
com.iflytek.cloud.ui.a$a -> com.iflytek.cloud.ui.a$a:
    java.lang.String b -> b
    com.iflytek.cloud.ui.a a -> a
    void onClick(android.view.View) -> onClick
    void updateDrawState(android.text.TextPaint) -> updateDrawState
com.iflytek.cloud.ui.a.a -> com.iflytek.cloud.ui.a.a:
    int a -> a
    android.graphics.drawable.Drawable a(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options) -> a
    android.graphics.Bitmap a(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options) -> a
    android.graphics.drawable.Drawable a(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,java.lang.String) -> a
com.iflytek.cloud.ui.a.b -> com.iflytek.cloud.ui.a.b:
    com.iflytek.cloud.ui.a.d a -> a
    com.iflytek.cloud.ui.a.b$a b -> b
    void onCreate(android.os.Bundle) -> onCreate
    void show() -> show
    void dismiss() -> dismiss
    boolean destroy() -> destroy
com.iflytek.cloud.ui.a.b$a -> com.iflytek.cloud.ui.a.b$a:
    void a() -> a
com.iflytek.cloud.ui.a.c -> com.iflytek.cloud.ui.a.c:
    com.iflytek.cloud.ui.a.b a -> a
    void a() -> a
com.iflytek.cloud.ui.a.d -> com.iflytek.cloud.ui.a.d:
    com.iflytek.cloud.ui.a.b$a a -> a
    boolean b -> b
    boolean c -> c
    void e() -> e
    void a(com.iflytek.cloud.ui.a.b$a) -> a
    void f() -> f
    void b() -> b
    void c() -> c
    boolean a(android.view.ViewGroup) -> a
    boolean d() -> d
com.iflytek.cloud.ui.a.e -> com.iflytek.cloud.ui.a.e:
    java.util.HashMap e -> e
    java.util.HashMap f -> f
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int[] a() -> a
    int[] b() -> b
    java.io.InputStream b(android.content.Context,java.lang.String) -> b
    android.view.View a(android.content.Context,java.lang.String,android.view.ViewGroup) -> a
    android.graphics.drawable.Drawable a(android.content.Context,java.lang.String) -> a
    android.graphics.drawable.Drawable c(android.content.Context,java.lang.String) -> c
com.iflytek.cloud.ui.a.f -> com.iflytek.cloud.ui.a.f:
    android.graphics.drawable.Drawable b -> b
    android.graphics.drawable.Drawable c -> c
    android.graphics.Path a -> a
    void a(int) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void finalize() -> finalize
    void onMeasure(int,int) -> onMeasure
com.iflytek.cloud.ui.b -> com.iflytek.cloud.ui.b:
    com.iflytek.cloud.ui.a a -> a
    void onBeginOfSpeech() -> onBeginOfSpeech
    void onVolumeChanged(int) -> onVolumeChanged
    void onEndOfSpeech() -> onEndOfSpeech
    void onResult(com.iflytek.cloud.speech.RecognizerResult,boolean) -> onResult
    void onError(com.iflytek.cloud.speech.SpeechError) -> onError
    void onEvent(int,int,int,java.lang.String) -> onEvent
com.iflytek.cloud.util.ContactManager -> com.iflytek.cloud.util.ContactManager:
    com.iflytek.cloud.util.ContactManager getManager() -> getManager
    com.iflytek.cloud.util.ContactManager createManager(android.content.Context,com.iflytek.cloud.util.ContactManager$ContactListener) -> createManager
    java.lang.String queryAllContactsName() -> queryAllContactsName
    void asyncQueryAllContactsName() -> asyncQueryAllContactsName
com.iflytek.cloud.util.ContactManager$ContactListener -> com.iflytek.cloud.util.ContactManager$ContactListener:
    void onContactQueryFinish(java.lang.String,boolean) -> onContactQueryFinish
com.iflytek.cloud.util.UserWords -> com.iflytek.cloud.util.UserWords:
    java.util.Hashtable a -> a
    boolean hasKey(java.lang.String) -> hasKey
    boolean putWord(java.lang.String) -> putWord
    boolean putWord(java.lang.String,java.lang.String) -> putWord
    boolean putWords(java.util.ArrayList) -> putWords
    boolean putWords(java.lang.String,java.util.ArrayList) -> putWords
    boolean a(java.util.ArrayList,java.lang.String) -> a
    boolean a(java.util.ArrayList,java.util.ArrayList) -> a
    java.util.ArrayList getWords() -> getWords
    java.util.ArrayList getKeys() -> getKeys
    java.util.ArrayList getWords(java.lang.String) -> getWords
    void a(java.lang.String) -> a
    java.lang.String a() -> a
    java.lang.String toString() -> toString
com.iflytek.cloud.util.a.a -> com.iflytek.cloud.util.a.a:
    com.iflytek.cloud.util.a.c.a b -> b
    android.content.Context a -> a
    java.lang.String[] c -> c
    java.lang.String[] d -> d
    java.util.HashMap e -> e
    java.util.HashMap f -> f
    java.util.List g -> g
    java.util.HashMap h -> h
    java.util.HashMap i -> i
    java.lang.String[] a() -> a
    void a(int) -> a
    void b() -> b
com.iflytek.cloud.util.a.a.a -> com.iflytek.cloud.util.a.a.a:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String a(com.iflytek.cloud.util.a.a.a,java.lang.String) -> a
    java.lang.String b(com.iflytek.cloud.util.a.a.a,java.lang.String) -> b
    java.lang.String c(com.iflytek.cloud.util.a.a.a,java.lang.String) -> c
    java.lang.String d(com.iflytek.cloud.util.a.a.a,java.lang.String) -> d
    java.lang.String e(com.iflytek.cloud.util.a.a.a,java.lang.String) -> e
    java.lang.String f(com.iflytek.cloud.util.a.a.a,java.lang.String) -> f
    java.lang.String g(com.iflytek.cloud.util.a.a.a,java.lang.String) -> g
com.iflytek.cloud.util.a.a.b -> com.iflytek.cloud.util.a.a.b:
    com.iflytek.cloud.util.a.a.a a(android.os.Parcel) -> a
    com.iflytek.cloud.util.a.a.a[] a(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.iflytek.cloud.util.a.b -> com.iflytek.cloud.util.a.b:
    com.iflytek.cloud.util.a.b a -> a
    android.content.Context b -> b
    int c -> c
    com.iflytek.cloud.util.a.c.a d -> d
    com.iflytek.cloud.util.a.a e -> e
    com.iflytek.cloud.util.a.b$b f -> f
    com.iflytek.cloud.util.a.b$a g -> g
    android.os.HandlerThread h -> h
    com.iflytek.cloud.util.ContactManager$ContactListener i -> i
    android.os.Handler j -> j
    long k -> k
    long l -> l
    com.iflytek.cloud.util.a.b a() -> a
    com.iflytek.cloud.util.a.b a(android.content.Context,com.iflytek.cloud.util.ContactManager$ContactListener) -> a
    java.lang.String queryAllContactsName() -> queryAllContactsName
    void asyncQueryAllContactsName() -> asyncQueryAllContactsName
    void b() -> b
    void c() -> c
    void a(com.iflytek.cloud.util.a.b) -> a
    void b(com.iflytek.cloud.util.a.b) -> b
    long c(com.iflytek.cloud.util.a.b) -> c
    long a(com.iflytek.cloud.util.a.b,long) -> a
    long d(com.iflytek.cloud.util.a.b) -> d
    long b(com.iflytek.cloud.util.a.b,long) -> b
com.iflytek.cloud.util.a.b$a -> com.iflytek.cloud.util.a.b$a:
    com.iflytek.cloud.util.a.b a -> a
    void onChange(boolean) -> onChange
com.iflytek.cloud.util.a.b$b -> com.iflytek.cloud.util.a.b$b:
    com.iflytek.cloud.util.a.b a -> a
    void onChange(boolean) -> onChange
com.iflytek.cloud.util.a.b.a -> com.iflytek.cloud.util.a.b.a:
    java.lang.String[] d -> d
    java.lang.String[] e -> e
    java.lang.String[] f -> f
    java.lang.String[] g -> g
    java.lang.String[] h -> h
    java.lang.String[] i -> i
    java.lang.String[] j -> j
    android.net.Uri a() -> a
    java.lang.String[] b() -> b
    java.lang.String c() -> c
com.iflytek.cloud.util.a.b.b -> com.iflytek.cloud.util.a.b.b:
    java.lang.String[] d -> d
    java.lang.String[] e -> e
    java.lang.String[] f -> f
    java.lang.String[] g -> g
    java.lang.String[] h -> h
    java.lang.String[] i -> i
    java.lang.String[] j -> j
    android.net.Uri a() -> a
    java.lang.String[] b() -> b
    java.lang.String c() -> c
com.iflytek.cloud.util.a.c -> com.iflytek.cloud.util.a.c:
    com.iflytek.cloud.util.a.b a -> a
    void run() -> run
com.iflytek.cloud.util.a.c.a -> com.iflytek.cloud.util.a.c.a:
    java.lang.String[] a -> a
    android.content.Context b -> b
    java.lang.String[] c -> c
    java.lang.String[] b() -> b
    java.lang.String c() -> c
    java.util.HashMap d() -> d
    java.util.List e() -> e
    android.net.Uri f() -> f
    android.net.Uri a() -> a
    java.util.HashMap a(int) -> a
    void a(android.content.Context) -> a
com.iflytek.cloud.util.a.d -> com.iflytek.cloud.util.a.d:
    java.lang.String a(java.lang.String) -> a
    int a(java.lang.String,java.lang.String,boolean) -> a
com.iflytek.cloud.util.a.e -> com.iflytek.cloud.util.a.e:
    java.lang.String[] a -> a
    java.lang.String[] b -> b
    java.lang.String[] c -> c
    java.lang.String a(java.lang.String) -> a
    java.lang.String a(java.lang.String[],char) -> a
com.iflytek.msc.MSC -> com.iflytek.msc.MSC:
    int DebugLog(boolean) -> DebugLog
    char[] QTTSSessionBegin(byte[],com.iflytek.msc.MSCSessionInfo) -> QTTSSessionBegin
    int QTTSTextPut(char[],byte[]) -> QTTSTextPut
    byte[] QTTSAudioGet(char[],com.iflytek.msc.MSCSessionInfo) -> QTTSAudioGet
    int QTTSGetParam(char[],byte[],com.iflytek.msc.MSCSessionInfo) -> QTTSGetParam
    char[] QTTSAudioInfo(char[]) -> QTTSAudioInfo
    int QTTSSessionEnd(char[],byte[]) -> QTTSSessionEnd
    char[] QISRSessionBegin(byte[],byte[],com.iflytek.msc.MSCSessionInfo) -> QISRSessionBegin
    int QISRGetParam(char[],byte[],com.iflytek.msc.MSCSessionInfo) -> QISRGetParam
    int QISRSetParam(char[],byte[],byte[]) -> QISRSetParam
    int QISRAudioWrite(char[],byte[],int,int,com.iflytek.msc.MSCSessionInfo) -> QISRAudioWrite
    byte[] QISRGetResult(char[],com.iflytek.msc.MSCSessionInfo) -> QISRGetResult
    int QISRSessionEnd(char[],byte[]) -> QISRSessionEnd
    int QMSPLogin(byte[],byte[],byte[]) -> QMSPLogin
    byte[] QMSPUploadData(byte[],byte[],int,byte[],com.iflytek.msc.MSCSessionInfo) -> QMSPUploadData
    byte[] QMSPDownloadData(byte[],com.iflytek.msc.MSCSessionInfo) -> QMSPDownloadData
    byte[] QMSPSearch(byte[],byte[],com.iflytek.msc.MSCSessionInfo) -> QMSPSearch
    int QMSPLogOut() -> QMSPLogOut
com.iflytek.msc.MSCSessionInfo -> com.iflytek.msc.MSCSessionInfo:
    int errorcode -> errorcode
    int epstatues -> epstatues
    int rsltstatus -> rsltstatus
    int sesstatus -> sesstatus
    byte[] buffer -> buffer
    int buflen -> buflen
com.lidroid.xutils.DbUtils -> com.b.a.a:
    java.util.HashMap daoMap -> a
    android.database.sqlite.SQLiteDatabase database -> b
    com.lidroid.xutils.DbUtils$DaoConfig config -> c
    boolean debug -> d
    boolean allowTransaction -> e
    com.lidroid.xutils.DbUtils$FindTempCache findTempCache -> f
    com.lidroid.xutils.DbUtils getInstance(com.lidroid.xutils.DbUtils$DaoConfig) -> a
    com.lidroid.xutils.DbUtils create(android.content.Context) -> a
    void saveOrUpdate(java.lang.Object) -> a
    void saveOrUpdateAll(java.util.List) -> a
    void save(java.lang.Object) -> b
    java.lang.Object findFirst(com.lidroid.xutils.db.sqlite.Selector) -> a
    java.util.List findAll(com.lidroid.xutils.db.sqlite.Selector) -> b
    android.database.sqlite.SQLiteDatabase createDbFileOnSDCard(com.lidroid.xutils.DbUtils$DaoConfig) -> b
    void saveOrUpdateWithoutTransaction(java.lang.Object) -> c
    void replaceWithoutTransaction(java.lang.Object) -> d
    void saveWithoutTransaction(java.lang.Object) -> e
    boolean saveBindingIdWithoutTransaction(java.lang.Object) -> f
    void updateWithoutTransaction(java.lang.Object,java.lang.String[]) -> a
    void fillContentValues(android.content.ContentValues,java.util.List) -> a
    void createTableIfNotExist(java.lang.Class) -> a
    boolean tableIsExist(java.lang.Class) -> b
    void dropDb() -> a
    void debugSql(java.lang.String) -> c
    void beginTransaction() -> b
    void setTransactionSuccessful() -> c
    void endTransaction() -> d
    void execNonQuery(com.lidroid.xutils.db.sqlite.SqlInfo) -> a
    void execNonQuery(java.lang.String) -> a
    android.database.Cursor execQuery(java.lang.String) -> b
com.lidroid.xutils.DbUtils$DaoConfig -> com.b.a.b:
    android.content.Context context -> a
    java.lang.String dbName -> b
    int dbVersion -> c
    com.lidroid.xutils.DbUtils$DbUpgradeListener dbUpgradeListener -> d
    java.lang.String sdCardPath -> e
    android.content.Context getContext() -> a
    java.lang.String getDbName() -> b
    int getDbVersion() -> c
    com.lidroid.xutils.DbUtils$DbUpgradeListener getDbUpgradeListener() -> d
    java.lang.String getSdCardPath() -> e
com.lidroid.xutils.DbUtils$DbUpgradeListener -> com.b.a.c:
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> a
com.lidroid.xutils.DbUtils$FindTempCache -> com.b.a.d:
    java.util.concurrent.ConcurrentHashMap cache -> b
    long seq -> c
    com.lidroid.xutils.DbUtils this$0 -> a
    void put(java.lang.String,java.lang.Object) -> a
    java.lang.Object get(java.lang.String) -> a
    void setSeq(long) -> a
com.lidroid.xutils.DbUtils$SQLiteDbHelper -> com.b.a.e:
    com.lidroid.xutils.DbUtils$DbUpgradeListener mDbUpgradeListener -> b
    com.lidroid.xutils.DbUtils this$0 -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.lidroid.xutils.HttpUtils -> com.b.a.f:
    com.lidroid.xutils.http.HttpGetCache sHttpGetCache -> a
    org.apache.http.impl.client.DefaultHttpClient httpClient -> b
    org.apache.http.protocol.HttpContext httpContext -> c
    com.lidroid.xutils.http.callback.HttpRedirectHandler httpRedirectHandler -> d
    java.lang.String defaultResponseTextCharset -> e
    long currentRequestExpiry -> f
    java.util.concurrent.ThreadFactory sThreadFactory -> g
    int threadPoolSize -> h
    java.util.concurrent.Executor executor -> i
    com.lidroid.xutils.http.HttpHandler send(com.lidroid.xutils.http.client.HttpRequest$HttpMethod,java.lang.String,com.lidroid.xutils.http.callback.RequestCallBack) -> a
    com.lidroid.xutils.http.HttpHandler send(com.lidroid.xutils.http.client.HttpRequest$HttpMethod,java.lang.String,com.lidroid.xutils.http.RequestParams,com.lidroid.xutils.http.callback.RequestCallBack) -> a
    com.lidroid.xutils.http.HttpHandler send(com.lidroid.xutils.http.client.HttpRequest$HttpMethod,java.lang.String,com.lidroid.xutils.http.RequestParams,java.lang.String,com.lidroid.xutils.http.callback.RequestCallBack) -> a
    com.lidroid.xutils.http.HttpHandler sendRequest(com.lidroid.xutils.http.client.HttpRequest,com.lidroid.xutils.http.RequestParams,java.lang.String,com.lidroid.xutils.http.callback.RequestCallBack) -> a
com.lidroid.xutils.HttpUtils$1 -> com.b.a.g:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.lidroid.xutils.HttpUtils$2 -> com.b.a.h:
    com.lidroid.xutils.HttpUtils this$0 -> a
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
com.lidroid.xutils.HttpUtils$3 -> com.b.a.i:
    com.lidroid.xutils.HttpUtils this$0 -> a
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
com.lidroid.xutils.db.annotation.Check -> com.b.a.a.a.a:
    java.lang.String value() -> a
com.lidroid.xutils.db.annotation.Column -> com.b.a.a.a.b:
    java.lang.String column() -> a
    java.lang.String defaultValue() -> b
com.lidroid.xutils.db.annotation.Finder -> com.b.a.a.a.c:
    java.lang.String valueColumn() -> a
    java.lang.String targetColumn() -> b
com.lidroid.xutils.db.annotation.Foreign -> com.b.a.a.a.d:
    java.lang.String column() -> a
    java.lang.String foreign() -> b
com.lidroid.xutils.db.annotation.Id -> com.b.a.a.a.e:
    java.lang.String column() -> a
com.lidroid.xutils.db.annotation.NoAutoIncrement -> com.b.a.a.a.f:
com.lidroid.xutils.db.annotation.NotNull -> com.b.a.a.a.g:
com.lidroid.xutils.db.annotation.Table -> com.b.a.a.a.h:
    java.lang.String name() -> a
com.lidroid.xutils.db.annotation.Transient -> com.b.a.a.a.i:
com.lidroid.xutils.db.annotation.Unique -> com.b.a.a.a.j:
com.lidroid.xutils.db.converter.BooleanColumnConverter -> com.b.a.a.b.a:
    java.lang.Boolean getFiledValue(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Boolean) -> a
    java.lang.String getColumnDbType() -> a
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.db.converter.ByteArrayColumnConverter -> com.b.a.a.b.b:
    byte[] getFiledValue(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,byte[]) -> a
    java.lang.String getColumnDbType() -> a
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.db.converter.ByteColumnConverter -> com.b.a.a.b.c:
    java.lang.Byte getFiledValue(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Byte) -> a
    java.lang.String getColumnDbType() -> a
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.db.converter.CharColumnConverter -> com.b.a.a.b.d:
    java.lang.Character getFiledValue(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Character) -> a
    java.lang.String getColumnDbType() -> a
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.db.converter.ColumnConverter -> com.b.a.a.b.e:
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
    java.lang.String getColumnDbType() -> a
com.lidroid.xutils.db.converter.ColumnConverterFactory -> com.b.a.a.b.f:
    java.util.concurrent.ConcurrentHashMap columnType_columnConverter_map -> a
    com.lidroid.xutils.db.converter.ColumnConverter getColumnConverter(java.lang.Class) -> a
    java.lang.String getDbColumnType(java.lang.Class) -> b
    boolean isSupportColumnConverter(java.lang.Class) -> c
com.lidroid.xutils.db.converter.DateColumnConverter -> com.b.a.a.b.g:
    java.util.Date getFiledValue(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.util.Date) -> a
    java.lang.String getColumnDbType() -> a
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.db.converter.DoubleColumnConverter -> com.b.a.a.b.h:
    java.lang.Double getFiledValue(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Double) -> a
    java.lang.String getColumnDbType() -> a
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.db.converter.FloatColumnConverter -> com.b.a.a.b.i:
    java.lang.Float getFiledValue(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Float) -> a
    java.lang.String getColumnDbType() -> a
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.db.converter.IntegerColumnConverter -> com.b.a.a.b.j:
    java.lang.Integer getFiledValue(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Integer) -> a
    java.lang.String getColumnDbType() -> a
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.db.converter.LongColumnConverter -> com.b.a.a.b.k:
    java.lang.Long getFiledValue(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Long) -> a
    java.lang.String getColumnDbType() -> a
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.db.converter.ShortColumnConverter -> com.b.a.a.b.l:
    java.lang.Short getFiledValue(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Short) -> a
    java.lang.String getColumnDbType() -> a
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.db.converter.SqlDateColumnConverter -> com.b.a.a.b.m:
    java.sql.Date getFiledValue(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.sql.Date) -> a
    java.lang.String getColumnDbType() -> a
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.db.converter.StringColumnConverter -> com.b.a.a.b.n:
    java.lang.String getFiledValue(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.String) -> a
    java.lang.String getColumnDbType() -> a
    java.lang.Object getFiledValue(java.lang.Object,android.database.Cursor,int) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.db.sqlite.CursorUtils -> com.b.a.a.c.a:
    java.lang.Object getEntity(com.lidroid.xutils.DbUtils,android.database.Cursor,java.lang.Class,long) -> a
com.lidroid.xutils.db.sqlite.CursorUtils$EntityTempCache -> com.b.a.a.c.b:
    com.lidroid.xutils.util.core.DoubleKeyValueMap cache -> a
    long seq -> b
    void put(java.lang.Object,java.lang.String) -> a
    java.lang.Object get(java.lang.Class,java.lang.String) -> a
    void setSeq(long) -> a
com.lidroid.xutils.db.sqlite.CursorUtils$FindCacheSequence -> com.b.a.a.c.c:
    long seq -> a
    java.lang.String FOREIGN_LAZY_LOADER_CLASS_NAME -> b
    java.lang.String FINDER_LAZY_LOADER_CLASS_NAME -> c
    long getSeq() -> a
com.lidroid.xutils.db.sqlite.FinderLazyLoader -> com.b.a.a.c.d:
    com.lidroid.xutils.db.table.Finder finderColumn -> a
    java.lang.Object finderValue -> b
    java.util.List getAllFromDb() -> a
    java.lang.Object getFirstFromDb() -> b
com.lidroid.xutils.db.sqlite.ForeignLazyLoader -> com.b.a.a.c.e:
    com.lidroid.xutils.db.table.Foreign foreignColumn -> a
    java.lang.Object columnValue -> b
    java.util.List getAllFromDb() -> a
    java.lang.Object getFirstFromDb() -> b
    java.lang.Object getColumnValue() -> c
com.lidroid.xutils.db.sqlite.Selector -> com.b.a.a.c.f:
    java.lang.Class entityType -> a
    java.lang.String tableName -> b
    com.lidroid.xutils.db.sqlite.WhereBuilder whereBuilder -> c
    java.util.List orderByList -> d
    int limit -> e
    int offset -> f
    com.lidroid.xutils.db.sqlite.Selector from(java.lang.Class) -> a
    com.lidroid.xutils.db.sqlite.Selector where(java.lang.String,java.lang.String,java.lang.Object) -> a
    com.lidroid.xutils.db.sqlite.Selector limit(int) -> a
    java.lang.String toString() -> toString
    java.lang.Class getEntityType() -> a
com.lidroid.xutils.db.sqlite.Selector$OrderBy -> com.b.a.a.c.g:
    java.lang.String columnName -> a
    boolean desc -> b
    java.lang.String toString() -> toString
com.lidroid.xutils.db.sqlite.SqlInfo -> com.b.a.a.c.h:
    java.lang.String sql -> a
    java.util.LinkedList bindArgs -> b
    java.lang.String getSql() -> a
    void setSql(java.lang.String) -> a
    java.util.LinkedList getBindArgs() -> b
    java.lang.Object[] getBindArgsAsArray() -> c
    void addBindArg(java.lang.Object) -> a
com.lidroid.xutils.db.sqlite.SqlInfoBuilder -> com.b.a.a.c.i:
    com.lidroid.xutils.db.sqlite.SqlInfo buildInsertSqlInfo(com.lidroid.xutils.DbUtils,java.lang.Object) -> a
    com.lidroid.xutils.db.sqlite.SqlInfo buildReplaceSqlInfo(com.lidroid.xutils.DbUtils,java.lang.Object) -> b
    com.lidroid.xutils.db.sqlite.SqlInfo buildUpdateSqlInfo(com.lidroid.xutils.DbUtils,java.lang.Object,java.lang.String[]) -> a
    com.lidroid.xutils.db.sqlite.SqlInfo buildCreateTableSqlInfo(java.lang.Class) -> a
    com.lidroid.xutils.db.table.KeyValue column2KeyValue(java.lang.Object,com.lidroid.xutils.db.table.Column) -> a
    java.util.List entity2KeyValueList(com.lidroid.xutils.DbUtils,java.lang.Object) -> c
com.lidroid.xutils.db.sqlite.WhereBuilder -> com.b.a.a.c.j:
    java.util.List whereItems -> a
    com.lidroid.xutils.db.sqlite.WhereBuilder b(java.lang.String,java.lang.String,java.lang.Object) -> a
    int getWhereItemSize() -> a
    java.lang.String toString() -> toString
    void appendCondition(java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
com.lidroid.xutils.db.table.Column -> com.b.a.a.d.a:
    java.lang.String columnName -> a
    java.lang.Object defaultValue -> f
    java.lang.reflect.Method getMethod -> b
    java.lang.reflect.Method setMethod -> c
    java.lang.reflect.Field columnField -> d
    com.lidroid.xutils.db.converter.ColumnConverter columnConverter -> e
    void setValue2Entity(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object getColumnValue(java.lang.Object) -> a
    java.lang.String getColumnName() -> a
    java.lang.Object getDefaultValue() -> b
    java.lang.reflect.Field getColumnField() -> c
    java.lang.String getColumnDbType() -> d
com.lidroid.xutils.db.table.ColumnUtils -> com.b.a.a.d.b:
    java.lang.reflect.Method getColumnGetMethod(java.lang.Class,java.lang.reflect.Field) -> a
    java.lang.reflect.Method getColumnSetMethod(java.lang.Class,java.lang.reflect.Field) -> b
    java.lang.String getColumnNameByField(java.lang.reflect.Field) -> a
    java.lang.String getForeignColumnNameByField(java.lang.reflect.Field) -> b
    java.lang.Object getColumnDefaultValue(java.lang.reflect.Field) -> c
    boolean isTransient(java.lang.reflect.Field) -> d
    boolean isForeign(java.lang.reflect.Field) -> e
    boolean isFinder(java.lang.reflect.Field) -> f
    boolean isUnique(java.lang.reflect.Field) -> g
    boolean isNotNull(java.lang.reflect.Field) -> h
    java.lang.String getCheck(java.lang.reflect.Field) -> i
    java.lang.Object valueStr2SimpleTypeFieldValue(java.lang.Class,java.lang.String) -> a
    java.lang.Class getForeignEntityType(com.lidroid.xutils.db.table.Foreign) -> a
    java.lang.Class getFinderTargetEntityType(com.lidroid.xutils.db.table.Finder) -> a
    java.lang.Boolean convert2Boolean(java.lang.Object) -> a
    java.lang.Object convert2DbColumnValueIfNeeded(java.lang.Object) -> b
    boolean isStartWithIs(java.lang.String) -> a
    java.lang.reflect.Method getBooleanColumnGetMethod(java.lang.Class,java.lang.String) -> b
    java.lang.reflect.Method getBooleanColumnSetMethod(java.lang.Class,java.lang.reflect.Field) -> c
com.lidroid.xutils.db.table.Finder -> com.b.a.a.d.c:
    com.lidroid.xutils.DbUtils db -> f
    java.lang.String valueColumnName -> g
    java.lang.String targetColumnName -> h
    java.lang.Class getTargetEntityType() -> e
    void setValue2Entity(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.String getTargetColumnName() -> f
    java.lang.Object getColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.Object) -> b
    java.lang.Object getDefaultValue() -> b
    java.lang.String getColumnDbType() -> d
com.lidroid.xutils.db.table.Foreign -> com.b.a.a.d.d:
    com.lidroid.xutils.DbUtils db -> f
    java.lang.String foreignColumnName -> g
    java.lang.Class foreignColumnType -> h
    com.lidroid.xutils.db.converter.ColumnConverter foreignColumnConverter -> i
    java.lang.String getForeignColumnName() -> e
    java.lang.Class getForeignEntityType() -> f
    java.lang.Class getForeignColumnType() -> g
    void setValue2Entity(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object getColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.Object) -> b
    java.lang.String getColumnDbType() -> d
    java.lang.Object getDefaultValue() -> b
com.lidroid.xutils.db.table.Id -> com.b.a.a.d.e:
    boolean isAutoIncrement() -> e
    void setAutoIncrementId(java.lang.Object,long) -> a
    java.lang.Object getColumnValue(java.lang.Object) -> a
com.lidroid.xutils.db.table.KeyValue -> com.b.a.a.d.f:
    java.lang.String key -> a
    java.lang.Object value -> b
    java.lang.String getKey() -> a
    java.lang.Object getValue() -> b
com.lidroid.xutils.db.table.Table -> com.b.a.a.d.g:
    java.lang.String tableName -> b
    com.lidroid.xutils.db.table.Id id -> c
    java.util.HashMap columnMap -> a
    java.util.HashMap tableMap -> d
    boolean checkDatabase -> e
    com.lidroid.xutils.db.table.Table get(java.lang.Class) -> a
    void remove(java.lang.String) -> a
    java.lang.String getTableName() -> a
    com.lidroid.xutils.db.table.Id getId() -> b
    boolean isCheckDatabase() -> c
    void setCheckDatabase(boolean) -> a
com.lidroid.xutils.db.table.TableUtils -> com.b.a.a.d.h:
    java.util.concurrent.ConcurrentHashMap entityColumnsMap -> a
    java.util.concurrent.ConcurrentHashMap entityIdMap -> b
    java.lang.String getTableName(java.lang.Class) -> a
    java.util.HashMap getColumnMap(java.lang.Class) -> b
    void addColumns2Map(java.lang.Class,java.lang.String,java.util.HashMap) -> a
    com.lidroid.xutils.db.table.Column getColumnOrId(java.lang.Class,java.lang.String) -> a
    com.lidroid.xutils.db.table.Id getId(java.lang.Class) -> c
    java.lang.String getPrimaryKeyFieldName(java.lang.Class) -> d
    java.lang.String getPrimaryKeyColumnName(java.lang.Class) -> e
com.lidroid.xutils.exception.BaseException -> com.b.a.b.a:
com.lidroid.xutils.exception.DbException -> com.b.a.b.b:
com.lidroid.xutils.exception.HttpException -> com.b.a.b.c:
    int exceptionCode -> a
com.lidroid.xutils.http.HttpGetCache -> com.b.a.c.a:
    com.lidroid.xutils.util.core.LruMemoryCache mMemoryCache -> a
    int cacheSize -> b
    boolean enabled -> c
    long defaultExpiryTime -> d
    void setDefaultExpiryTime(long) -> a
    long getDefaultExpiryTime() -> a
    void put(java.lang.String,java.lang.String,long) -> a
    java.lang.String get(java.lang.String) -> a
com.lidroid.xutils.http.HttpGetCache$1 -> com.b.a.c.b:
    com.lidroid.xutils.http.HttpGetCache this$0 -> a
    int sizeOf(java.lang.String,java.lang.String) -> a
    int sizeOf(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.http.HttpHandler -> com.b.a.c.c:
    org.apache.http.impl.client.AbstractHttpClient client -> c
    org.apache.http.protocol.HttpContext context -> d
    com.lidroid.xutils.http.callback.StringDownloadHandler mStringDownloadHandler -> e
    com.lidroid.xutils.http.callback.FileDownloadHandler mFileDownloadHandler -> f
    com.lidroid.xutils.http.callback.HttpRedirectHandler httpRedirectHandler -> g
    java.lang.String requestUrl -> h
    org.apache.http.client.methods.HttpRequestBase request -> i
    boolean isUploading -> j
    com.lidroid.xutils.http.callback.RequestCallBack callback -> k
    int retriedTimes -> l
    java.lang.String fileSavePath -> m
    boolean isDownloadingFile -> n
    boolean autoResume -> o
    boolean autoRename -> p
    java.lang.String charset -> q
    long expiry -> r
    boolean mStopped -> s
    long lastUpdateTime -> t
    void setHttpRedirectHandler(com.lidroid.xutils.http.callback.HttpRedirectHandler) -> a
    void setExpiry(long) -> a
    com.lidroid.xutils.http.ResponseInfo sendRequest(org.apache.http.client.methods.HttpRequestBase) -> a
    java.lang.Void doInBackground(java.lang.Object[]) -> a
    void onProgressUpdate(java.lang.Object[]) -> b
    com.lidroid.xutils.http.ResponseInfo handleResponse(org.apache.http.HttpResponse) -> a
    boolean updateProgress(long,long,boolean) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> c
com.lidroid.xutils.http.RequestParams -> com.b.a.c.d:
    java.lang.String charset -> a
    java.util.List headers -> b
    java.util.LinkedHashMap queryStringParams -> c
    org.apache.http.HttpEntity bodyEntity -> d
    java.util.LinkedHashMap bodyParams -> e
    java.util.HashMap fileParams -> f
    org.apache.http.HttpEntity getEntity() -> a
    java.util.List getQueryStringParams() -> b
    java.util.List getHeaders() -> c
com.lidroid.xutils.http.RequestParams$HeaderItem -> com.b.a.c.e:
    boolean overwrite -> a
    org.apache.http.Header header -> b
com.lidroid.xutils.http.ResponseInfo -> com.b.a.c.f:
    java.lang.Object result -> a
    boolean resultFormCache -> b
    org.apache.http.Header[] allHeaders -> c
    java.util.Locale locale -> d
    int statusCode -> e
    org.apache.http.ProtocolVersion protocolVersion -> f
    java.lang.String reasonPhrase -> g
    long contentLength -> h
    org.apache.http.Header contentType -> i
    org.apache.http.Header contentEncoding -> j
com.lidroid.xutils.http.callback.DefaultHttpRedirectHandler -> com.b.a.c.a.a:
    org.apache.http.client.methods.HttpRequestBase getDirectRequest(org.apache.http.HttpResponse) -> a
com.lidroid.xutils.http.callback.FileDownloadHandler -> com.b.a.c.a.b:
    java.io.File handleEntity(org.apache.http.HttpEntity,com.lidroid.xutils.http.callback.RequestCallBackHandler,java.lang.String,boolean,java.lang.String) -> a
com.lidroid.xutils.http.callback.HttpRedirectHandler -> com.b.a.c.a.c:
    org.apache.http.client.methods.HttpRequestBase getDirectRequest(org.apache.http.HttpResponse) -> a
com.lidroid.xutils.http.callback.RequestCallBack -> com.b.a.c.a.d:
    java.lang.String requestUrl -> a
    int rate -> b
    int getRate() -> a
    void setRequestUrl(java.lang.String) -> a
    void onStart() -> b
    void onLoading(long,long,boolean) -> a
    void onSuccess(com.lidroid.xutils.http.ResponseInfo) -> a
    void onFailure(com.lidroid.xutils.exception.HttpException,java.lang.String) -> a
com.lidroid.xutils.http.callback.RequestCallBackHandler -> com.b.a.c.a.e:
    boolean updateProgress(long,long,boolean) -> a
com.lidroid.xutils.http.callback.StringDownloadHandler -> com.b.a.c.a.f:
    java.lang.String handleEntity(org.apache.http.HttpEntity,com.lidroid.xutils.http.callback.RequestCallBackHandler,java.lang.String) -> a
com.lidroid.xutils.http.client.HttpRequest -> com.b.a.c.b.a:
    org.apache.http.HttpEntity entity -> a
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod method -> b
    com.lidroid.xutils.http.client.util.URIBuilder uriBuilder -> c
    com.lidroid.xutils.http.client.HttpRequest addQueryStringParams(java.util.List) -> a
    void setRequestParams(com.lidroid.xutils.http.RequestParams,com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
    java.net.URI getURI() -> getURI
    void setURI(java.net.URI) -> setURI
    java.lang.String getMethod() -> getMethod
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    java.lang.Object clone() -> clone
com.lidroid.xutils.http.client.HttpRequest$HttpMethod -> com.b.a.c.b.b:
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod GET -> a
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod POST -> b
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod PUT -> c
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod HEAD -> d
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod MOVE -> e
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod COPY -> f
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod DELETE -> g
    java.lang.String value -> h
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod[] ENUM$VALUES -> i
    java.lang.String toString() -> toString
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod[] values() -> values
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.http.client.RetryHandler -> com.b.a.c.b.c:
    java.util.HashSet exceptionWhiteList -> a
    java.util.HashSet exceptionBlackList -> b
    int maxRetries -> c
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
com.lidroid.xutils.http.client.entity.BodyParamsEntity -> com.b.a.c.b.a.a:
    byte[] content -> a
    boolean dirty -> b
    java.lang.String charset -> c
    java.util.List params -> d
    void refreshContent() -> a
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
com.lidroid.xutils.http.client.entity.DecompressingEntity -> com.b.a.c.b.a.b:
    java.io.InputStream content -> a
    long uncompressedLength -> b
    long uploadedSize -> c
    com.lidroid.xutils.http.callback.RequestCallBackHandler callBackHandler -> d
    java.io.InputStream decorate(java.io.InputStream) -> a
    java.io.InputStream getDecompressingStream() -> a
    java.io.InputStream getContent() -> getContent
    long getContentLength() -> getContentLength
    void writeTo(java.io.OutputStream) -> writeTo
    void setCallBackHandler(com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
com.lidroid.xutils.http.client.entity.GZipDecompressingEntity -> com.b.a.c.b.a.c:
    java.io.InputStream decorate(java.io.InputStream) -> a
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void setCallBackHandler(com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
    void writeTo(java.io.OutputStream) -> writeTo
com.lidroid.xutils.http.client.entity.UploadEntity -> com.b.a.c.b.a.d:
    void setCallBackHandler(com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
com.lidroid.xutils.http.client.multipart.FormBodyPart -> com.b.a.c.b.b.a:
    java.lang.String name -> a
    com.lidroid.xutils.http.client.multipart.MinimalFieldHeader header -> b
    com.lidroid.xutils.http.client.multipart.content.ContentBody body -> c
    java.lang.String getName() -> a
    com.lidroid.xutils.http.client.multipart.content.ContentBody getBody() -> b
    com.lidroid.xutils.http.client.multipart.MinimalFieldHeader getHeader() -> c
    void addField(java.lang.String,java.lang.String) -> a
    void generateContentDisposition(com.lidroid.xutils.http.client.multipart.content.ContentBody) -> a
    void generateContentType(com.lidroid.xutils.http.client.multipart.content.ContentBody) -> b
    void generateTransferEncoding(com.lidroid.xutils.http.client.multipart.content.ContentBody) -> c
com.lidroid.xutils.http.client.multipart.HttpMultipart -> com.b.a.c.b.b.b:
    org.apache.http.util.ByteArrayBuffer FIELD_SEP -> a
    org.apache.http.util.ByteArrayBuffer CR_LF -> b
    org.apache.http.util.ByteArrayBuffer TWO_DASHES -> c
    java.lang.String subType -> d
    java.nio.charset.Charset charset -> e
    java.lang.String boundary -> f
    java.util.List parts -> g
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode mode -> h
    int[] $SWITCH_TABLE$com$lidroid$xutils$http$client$multipart$HttpMultipartMode -> i
    org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String) -> a
    void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.io.OutputStream) -> a
    void writeField(com.lidroid.xutils.http.client.multipart.MinimalField,java.io.OutputStream) -> a
    void writeField(com.lidroid.xutils.http.client.multipart.MinimalField,java.nio.charset.Charset,java.io.OutputStream) -> a
    java.util.List getBodyParts() -> a
    void addBodyPart(com.lidroid.xutils.http.client.multipart.FormBodyPart) -> a
    java.lang.String getBoundary() -> b
    void doWriteTo(com.lidroid.xutils.http.client.multipart.HttpMultipartMode,java.io.OutputStream,boolean) -> a
    void doWriteTo(com.lidroid.xutils.http.client.multipart.HttpMultipartMode,java.io.OutputStream,com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo,boolean) -> a
    void writeTo(java.io.OutputStream,com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo) -> a
    long getTotalLength() -> c
    int[] $SWITCH_TABLE$com$lidroid$xutils$http$client$multipart$HttpMultipartMode() -> d
com.lidroid.xutils.http.client.multipart.HttpMultipartMode -> com.b.a.c.b.b.c:
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode STRICT -> a
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode BROWSER_COMPATIBLE -> b
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode[] ENUM$VALUES -> c
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode[] values() -> values
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.http.client.multipart.MIME -> com.b.a.c.b.b.d:
    java.nio.charset.Charset DEFAULT_CHARSET -> a
com.lidroid.xutils.http.client.multipart.MinimalField -> com.b.a.c.b.b.e:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String getName() -> a
    java.lang.String getBody() -> b
    java.lang.String toString() -> toString
com.lidroid.xutils.http.client.multipart.MinimalFieldHeader -> com.b.a.c.b.b.f:
    java.util.List fields -> a
    java.util.Map fieldMap -> b
    void addField(com.lidroid.xutils.http.client.multipart.MinimalField) -> a
    com.lidroid.xutils.http.client.multipart.MinimalField getField(java.lang.String) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.lidroid.xutils.http.client.multipart.MultipartEntity -> com.b.a.c.b.b.g:
    com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo callBackInfo -> a
    char[] MULTIPART_CHARS -> b
    com.lidroid.xutils.http.client.multipart.HttpMultipart multipart -> c
    org.apache.http.Header contentType -> d
    long length -> e
    boolean dirty -> f
    java.lang.String boundary -> g
    java.nio.charset.Charset charset -> h
    java.lang.String multipartSubtype -> i
    void setCallBackHandler(com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
    java.lang.String generateContentType(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String generateBoundary() -> a
    void addPart(com.lidroid.xutils.http.client.multipart.FormBodyPart) -> a
    void addPart(java.lang.String,com.lidroid.xutils.http.client.multipart.content.ContentBody) -> a
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    boolean isStreaming() -> isStreaming
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo -> com.b.a.c.b.b.h:
    com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo DEFAULT -> a
    com.lidroid.xutils.http.callback.RequestCallBackHandler callBackHandler -> b
    long totalLength -> c
    long pos -> d
    boolean doCallBack(boolean) -> a
com.lidroid.xutils.http.client.multipart.content.AbstractContentBody -> com.b.a.c.b.b.a.a:
    java.lang.String mimeType -> b
    java.lang.String mediaType -> c
    java.lang.String subType -> d
    com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo callBackInfo -> a
    java.lang.String getMimeType() -> a
    void setCallBackInfo(com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo) -> a
com.lidroid.xutils.http.client.multipart.content.ContentBody -> com.b.a.c.b.b.a.b:
    java.lang.String getFilename() -> b
    void writeTo(java.io.OutputStream) -> a
    void setCallBackInfo(com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo) -> a
com.lidroid.xutils.http.client.multipart.content.ContentDescriptor -> com.b.a.c.b.b.a.c:
    java.lang.String getMimeType() -> a
    java.lang.String getCharset() -> c
    java.lang.String getTransferEncoding() -> d
    long getContentLength() -> e
com.lidroid.xutils.http.client.multipart.content.StringBody -> com.b.a.c.b.b.a.d:
    byte[] content -> b
    java.nio.charset.Charset charset -> c
    void writeTo(java.io.OutputStream) -> a
    java.lang.String getTransferEncoding() -> d
    java.lang.String getCharset() -> c
    long getContentLength() -> e
    java.lang.String getFilename() -> b
com.lidroid.xutils.http.client.util.URIBuilder -> com.b.a.c.b.c.a:
    java.lang.String scheme -> a
    java.lang.String encodedSchemeSpecificPart -> b
    java.lang.String encodedAuthority -> c
    java.lang.String userInfo -> d
    java.lang.String encodedUserInfo -> e
    java.lang.String host -> f
    int port -> g
    java.lang.String path -> h
    java.lang.String encodedPath -> i
    java.lang.String encodedQuery -> j
    java.util.List queryParams -> k
    java.lang.String fragment -> l
    java.lang.String encodedFragment -> m
    java.util.List parseQuery(java.lang.String,java.nio.charset.Charset) -> a
    java.net.URI build() -> a
    java.lang.String buildString() -> b
    void digestURI(java.net.URI) -> a
    java.lang.String encodeUserInfo(java.lang.String) -> a
    java.lang.String encodePath(java.lang.String) -> b
    java.lang.String encodeQuery(java.util.List) -> a
    java.lang.String encodeFragment(java.lang.String) -> c
    com.lidroid.xutils.http.client.util.URIBuilder addParameter(java.lang.String,java.lang.String) -> a
    java.lang.String toString() -> toString
    java.lang.String normalizePath(java.lang.String) -> d
com.lidroid.xutils.http.client.util.URLEncodedUtils -> com.b.a.c.b.c.b:
    char[] DELIM -> a
    java.util.BitSet UNRESERVED -> b
    java.util.BitSet PUNCT -> c
    java.util.BitSet USERINFO -> d
    java.util.BitSet PATHSAFE -> e
    java.util.BitSet FRAGMENT -> f
    java.util.BitSet RESERVED -> g
    java.util.BitSet URLENCODER -> h
    java.util.List parse(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String format(java.util.List,java.lang.String) -> a
    java.lang.String format(java.lang.Iterable,java.nio.charset.Charset) -> a
    java.lang.String urlencode(java.lang.String,java.nio.charset.Charset,java.util.BitSet,boolean) -> a
    java.lang.String urldecode(java.lang.String,java.nio.charset.Charset,boolean) -> a
    java.lang.String decodeFormFields(java.lang.String,java.nio.charset.Charset) -> e
    java.lang.String encodeFormFields(java.lang.String,java.lang.String) -> a
    java.lang.String encodeFormFields(java.lang.String,java.nio.charset.Charset) -> f
    java.lang.String encUserInfo(java.lang.String,java.nio.charset.Charset) -> b
    java.lang.String encFragment(java.lang.String,java.nio.charset.Charset) -> c
    java.lang.String encPath(java.lang.String,java.nio.charset.Charset) -> d
com.lidroid.xutils.util.CharsetUtils -> com.b.a.d.a:
    java.lang.String defaultEncodingCharset -> a
    java.lang.String[] supportCharset -> b
    java.lang.String toCharset(java.lang.String,java.lang.String,int) -> a
    java.lang.String getEncoding(java.lang.String,int) -> a
    boolean isCharset(java.lang.String,java.lang.String,int) -> b
com.lidroid.xutils.util.IOUtils -> com.b.a.d.b:
    void closeQuietly(java.io.Closeable) -> a
    void closeQuietly(android.database.Cursor) -> a
com.lidroid.xutils.util.LogUtils -> com.b.a.d.c:
    java.lang.String customTagPrefix -> a
    boolean allowD -> b
    boolean allowE -> c
    boolean allowI -> d
    boolean allowV -> e
    boolean allowW -> f
    boolean allowWtf -> g
    com.lidroid.xutils.util.LogUtils$CustomLogger customLogger -> h
    java.lang.String generateTag(java.lang.StackTraceElement) -> a
    void d(java.lang.String) -> a
    void e(java.lang.String) -> b
    void e(java.lang.String,java.lang.Throwable) -> a
    void w(java.lang.String) -> c
    void w(java.lang.Throwable) -> a
com.lidroid.xutils.util.LogUtils$CustomLogger -> com.b.a.d.d:
    void d(java.lang.String,java.lang.String) -> a
    void e(java.lang.String,java.lang.String) -> b
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void w(java.lang.String,java.lang.String) -> c
    void w(java.lang.String,java.lang.Throwable) -> a
com.lidroid.xutils.util.OtherUtils -> com.b.a.d.e:
    boolean isSupportRange(org.apache.http.HttpResponse) -> a
    java.lang.String getFileNameFromHttpResponse(org.apache.http.HttpResponse) -> b
    java.lang.String getCharsetFromHttpResponse(org.apache.http.HttpResponse) -> c
    long sizeOfString(java.lang.String,java.lang.String) -> a
    java.lang.String getSubString(java.lang.String,int,int) -> a
    java.lang.StackTraceElement getCallerStackTraceElement() -> a
com.lidroid.xutils.util.core.CompatibleAsyncTask -> com.b.a.d.a.a:
    java.util.concurrent.ThreadFactory sThreadFactory -> c
    java.util.concurrent.BlockingQueue sPoolWorkQueue -> d
    java.util.concurrent.Executor THREAD_POOL_EXECUTOR -> a
    java.util.concurrent.Executor SERIAL_EXECUTOR -> b
    com.lidroid.xutils.util.core.CompatibleAsyncTask$InternalHandler sHandler -> e
    java.util.concurrent.Executor sDefaultExecutor -> f
    com.lidroid.xutils.util.core.CompatibleAsyncTask$WorkerRunnable mWorker -> g
    java.util.concurrent.FutureTask mFuture -> h
    com.lidroid.xutils.util.core.CompatibleAsyncTask$Status mStatus -> i
    java.util.concurrent.atomic.AtomicBoolean mCancelled -> j
    java.util.concurrent.atomic.AtomicBoolean mTaskInvoked -> k
    int[] $SWITCH_TABLE$com$lidroid$xutils$util$core$CompatibleAsyncTask$Status -> l
    void postResultIfNotInvoked(java.lang.Object) -> c
    java.lang.Object postResult(java.lang.Object) -> d
    java.lang.Object doInBackground(java.lang.Object[]) -> c
    void onPreExecute() -> a
    void onPostExecute(java.lang.Object) -> a
    void onProgressUpdate(java.lang.Object[]) -> b
    void onCancelled(java.lang.Object) -> b
    void onCancelled() -> b
    boolean isCancelled() -> c
    com.lidroid.xutils.util.core.CompatibleAsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[]) -> a
    void publishProgress(java.lang.Object[]) -> d
    void finish(java.lang.Object) -> e
    void access$0(com.lidroid.xutils.util.core.CompatibleAsyncTask,java.lang.Object) -> a
    java.util.concurrent.atomic.AtomicBoolean access$1(com.lidroid.xutils.util.core.CompatibleAsyncTask) -> a
    java.lang.Object access$2(com.lidroid.xutils.util.core.CompatibleAsyncTask,java.lang.Object) -> b
    void access$3(com.lidroid.xutils.util.core.CompatibleAsyncTask,java.lang.Object) -> c
    int[] $SWITCH_TABLE$com$lidroid$xutils$util$core$CompatibleAsyncTask$Status() -> d
com.lidroid.xutils.util.core.CompatibleAsyncTask$1 -> com.b.a.d.a.b:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.lidroid.xutils.util.core.CompatibleAsyncTask$2 -> com.b.a.d.a.c:
    com.lidroid.xutils.util.core.CompatibleAsyncTask this$0 -> a
    java.lang.Object call() -> call
com.lidroid.xutils.util.core.CompatibleAsyncTask$3 -> com.b.a.d.a.d:
    com.lidroid.xutils.util.core.CompatibleAsyncTask this$0 -> a
    void done() -> done
com.lidroid.xutils.util.core.CompatibleAsyncTask$AsyncTaskResult -> com.b.a.d.a.e:
    com.lidroid.xutils.util.core.CompatibleAsyncTask mTask -> a
    java.lang.Object[] mData -> b
com.lidroid.xutils.util.core.CompatibleAsyncTask$InternalHandler -> com.b.a.d.a.f:
    void handleMessage(android.os.Message) -> handleMessage
com.lidroid.xutils.util.core.CompatibleAsyncTask$SerialExecutor -> com.b.a.d.a.g:
    com.lidroid.xutils.util.core.compatible.ArrayDeque mTasks -> a
    java.lang.Runnable mActive -> b
    void execute(java.lang.Runnable) -> execute
    void scheduleNext() -> a
com.lidroid.xutils.util.core.CompatibleAsyncTask$SerialExecutor$1 -> com.b.a.d.a.h:
    com.lidroid.xutils.util.core.CompatibleAsyncTask$SerialExecutor this$1 -> a
    java.lang.Runnable val$r -> b
    void run() -> run
com.lidroid.xutils.util.core.CompatibleAsyncTask$Status -> com.b.a.d.a.i:
    com.lidroid.xutils.util.core.CompatibleAsyncTask$Status PENDING -> a
    com.lidroid.xutils.util.core.CompatibleAsyncTask$Status RUNNING -> b
    com.lidroid.xutils.util.core.CompatibleAsyncTask$Status FINISHED -> c
    com.lidroid.xutils.util.core.CompatibleAsyncTask$Status[] ENUM$VALUES -> d
    com.lidroid.xutils.util.core.CompatibleAsyncTask$Status[] values() -> values
    com.lidroid.xutils.util.core.CompatibleAsyncTask$Status valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.util.core.CompatibleAsyncTask$WorkerRunnable -> com.b.a.d.a.j:
    java.lang.Object[] mParams -> b
com.lidroid.xutils.util.core.DoubleKeyValueMap -> com.b.a.d.a.k:
    java.util.concurrent.ConcurrentHashMap k1_k2V_map -> a
    void put(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object,java.lang.Object) -> a
    void clear() -> a
com.lidroid.xutils.util.core.KeyExpiryMap -> com.b.a.d.a.l:
    java.lang.Long get(java.lang.Object) -> a
    java.lang.Long put(java.lang.Object,java.lang.Long) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Long remove(java.lang.Object) -> b
    void clear() -> clear
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
com.lidroid.xutils.util.core.LruMemoryCache -> com.b.a.d.a.m:
    java.util.LinkedHashMap map -> a
    int size -> b
    int maxSize -> c
    int putCount -> d
    int createCount -> e
    int evictionCount -> f
    int hitCount -> g
    int missCount -> h
    com.lidroid.xutils.util.core.KeyExpiryMap keyExpiryMap -> i
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object,long) -> a
    void trimToSize(int) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.Object create(java.lang.Object) -> c
    int safeSizeOf(java.lang.Object,java.lang.Object) -> b
    int sizeOf(java.lang.Object,java.lang.Object) -> a
    java.lang.String toString() -> toString
com.lidroid.xutils.util.core.SimpleSSLSocketFactory -> com.b.a.d.a.n:
    javax.net.ssl.SSLContext sslContext -> a
    java.security.KeyStore trustStore -> b
    com.lidroid.xutils.util.core.SimpleSSLSocketFactory instance -> c
    com.lidroid.xutils.util.core.SimpleSSLSocketFactory getSocketFactory() -> a
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    java.net.Socket createSocket() -> createSocket
com.lidroid.xutils.util.core.SimpleSSLSocketFactory$1 -> com.b.a.d.a.o:
    com.lidroid.xutils.util.core.SimpleSSLSocketFactory this$0 -> a
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
com.lidroid.xutils.util.core.compatible.ArrayDeque -> com.b.a.d.a.a.a:
    java.lang.Object[] elements -> a
    int head -> b
    int tail -> c
    void doubleCapacity() -> f
    java.lang.Object[] copyElements(java.lang.Object[]) -> a
    void addLast(java.lang.Object) -> a
    boolean offerLast(java.lang.Object) -> b
    java.lang.Object removeFirst() -> a
    java.lang.Object pollFirst() -> b
    java.lang.Object getFirst() -> c
    java.lang.Object peekFirst() -> d
    boolean removeFirstOccurrence(java.lang.Object) -> c
    boolean add(java.lang.Object) -> add
    boolean offer(java.lang.Object) -> offer
    java.lang.Object remove() -> remove
    java.lang.Object poll() -> poll
    java.lang.Object element() -> element
    java.lang.Object peek() -> peek
    boolean delete(int) -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    com.lidroid.xutils.util.core.compatible.ArrayDeque clone() -> e
    java.lang.Object[] copyOfRange(java.lang.Object[],int,int) -> a
    java.lang.Object clone() -> clone
    int access$1(com.lidroid.xutils.util.core.compatible.ArrayDeque) -> a
    int access$2(com.lidroid.xutils.util.core.compatible.ArrayDeque) -> b
    java.lang.Object[] access$3(com.lidroid.xutils.util.core.compatible.ArrayDeque) -> c
    boolean access$4(com.lidroid.xutils.util.core.compatible.ArrayDeque,int) -> a
com.lidroid.xutils.util.core.compatible.ArrayDeque$DeqIterator -> com.b.a.d.a.a.b:
    int cursor -> b
    int fence -> c
    int lastRet -> d
    com.lidroid.xutils.util.core.compatible.ArrayDeque this$0 -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.lidroid.xutils.util.core.compatible.Deque -> com.b.a.d.a.a.c:
net.simonvt.menudrawer.BottomDrawer -> net.simonvt.menudrawer.a:
    int mIndicatorLeft -> P
    void openMenu(boolean) -> a
    void closeMenu(boolean) -> b
    void setDropShadowColor(int) -> setDropShadowColor
    void onLayout(boolean,int,int,int,int) -> onLayout
    void offsetMenu(int) -> c
    void drawDropShadow(android.graphics.Canvas,int) -> a
    void drawMenuOverlay(android.graphics.Canvas,int) -> b
    void drawIndicator(android.graphics.Canvas,int) -> c
    int getIndicatorStartPos() -> getIndicatorStartPos
    void initPeekScroller() -> a
    void onOffsetPixelsChanged(int) -> a
    boolean isContentTouch(android.view.MotionEvent) -> a
    boolean onDownAllowDrag(android.view.MotionEvent) -> b
    boolean onMoveAllowDrag(android.view.MotionEvent,float) -> a
    void onMoveEvent(float) -> a
    void onUpEvent(android.view.MotionEvent) -> c
net.simonvt.menudrawer.BottomStaticDrawer -> net.simonvt.menudrawer.b:
    int mIndicatorLeft -> b
    void initDrawer(android.content.Context,android.util.AttributeSet,int) -> a
    void setDropShadowColor(int) -> setDropShadowColor
    void drawIndicator(android.graphics.Canvas) -> a
    int getIndicatorStartPos() -> getIndicatorStartPos
net.simonvt.menudrawer.BuildLayerFrameLayout -> net.simonvt.menudrawer.c:
    boolean mChanged -> a
    boolean mHardwareLayersEnabled -> b
    boolean mAttached -> c
    boolean mFirst -> d
    void setHardwareLayersEnabled(boolean) -> setHardwareLayersEnabled
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    boolean access$002(net.simonvt.menudrawer.BuildLayerFrameLayout,boolean) -> a
    boolean access$100(net.simonvt.menudrawer.BuildLayerFrameLayout) -> a
    boolean access$200(net.simonvt.menudrawer.BuildLayerFrameLayout) -> b
    boolean access$202(net.simonvt.menudrawer.BuildLayerFrameLayout,boolean) -> b
net.simonvt.menudrawer.BuildLayerFrameLayout$1 -> net.simonvt.menudrawer.d:
    net.simonvt.menudrawer.BuildLayerFrameLayout this$0 -> a
    void run() -> run
net.simonvt.menudrawer.BuildLayerFrameLayout$2 -> net.simonvt.menudrawer.e:
    net.simonvt.menudrawer.BuildLayerFrameLayout this$0 -> a
    void run() -> run
net.simonvt.menudrawer.ColorDrawable -> net.simonvt.menudrawer.f:
    net.simonvt.menudrawer.ColorDrawable$ColorState mState -> a
    android.graphics.Paint mPaint -> b
    int getChangingConfigurations() -> getChangingConfigurations
    void draw(android.graphics.Canvas) -> draw
    void setColor(int) -> a
    int getAlpha() -> getAlpha
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getOpacity() -> getOpacity
    android.graphics.drawable.Drawable$ConstantState getConstantState() -> getConstantState
net.simonvt.menudrawer.ColorDrawable$1 -> net.simonvt.menudrawer.g:
net.simonvt.menudrawer.ColorDrawable$ColorState -> net.simonvt.menudrawer.h:
    int mBaseColor -> a
    int mUseColor -> b
    int mChangingConfigurations -> c
    android.graphics.drawable.Drawable newDrawable() -> newDrawable
    android.graphics.drawable.Drawable newDrawable(android.content.res.Resources) -> newDrawable
    int getChangingConfigurations() -> getChangingConfigurations
net.simonvt.menudrawer.DraggableDrawer -> net.simonvt.menudrawer.i:
    android.view.animation.Interpolator INDICATOR_INTERPOLATOR -> a
    android.view.animation.Interpolator PEEK_INTERPOLATOR -> P
    int mTouchSlop -> b
    java.lang.Runnable mPeekRunnable -> c
    java.lang.Runnable mDragRunnable -> Q
    float mOffsetPixels -> d
    boolean mIsDragging -> e
    float mInitialMotionX -> f
    float mInitialMotionY -> g
    float mLastMotionX -> h
    float mLastMotionY -> i
    long mPeekDelay -> j
    net.simonvt.menudrawer.Scroller mPeekScroller -> k
    android.view.VelocityTracker mVelocityTracker -> l
    int mMaxVelocity -> m
    boolean mOffsetMenu -> n
    int mCloseEnough -> o
    java.lang.Runnable mPeekStartRunnable -> R
    net.simonvt.menudrawer.Scroller mScroller -> S
    boolean mLayerTypeHardware -> T
    void initDrawer(android.content.Context,android.util.AttributeSet,int) -> a
    boolean isMenuVisible() -> b
    void setMenuSize(int) -> setMenuSize
    void setOffsetMenuEnabled(boolean) -> setOffsetMenuEnabled
    boolean getOffsetMenuEnabled() -> getOffsetMenuEnabled
    void setHardwareLayerEnabled(boolean) -> setHardwareLayerEnabled
    int getTouchMode() -> getTouchMode
    void setTouchMode(int) -> setTouchMode
    void setTouchBezelSize(int) -> setTouchBezelSize
    int getTouchBezelSize() -> getTouchBezelSize
    void setOffsetPixels(float) -> setOffsetPixels
    void onOffsetPixelsChanged(int) -> a
    void startLayerTranslation() -> c
    void stopLayerTranslation() -> l
    void updateTouchAreaSize() -> d
    void endDrag() -> e
    void stopAnimation() -> f
    void completeAnimation() -> m
    void animateOffsetTo(int,int,boolean) -> a
    void postAnimationInvalidate() -> n
    void startPeek() -> g
    void initPeekScroller() -> a
    void peekDrawerInvalidate() -> o
    void completePeek() -> p
    void endPeek() -> h
    boolean isCloseEnough() -> i
    boolean isContentTouch(android.view.MotionEvent) -> a
    boolean onDownAllowDrag(android.view.MotionEvent) -> b
    boolean canChildScrollHorizontally(android.view.View,boolean,int,int,int) -> a
    boolean canChildScrollVertically(android.view.View,boolean,int,int,int) -> b
    int supportGetTranslationY(android.view.View) -> b
    int supportGetTranslationX(android.view.View) -> c
    boolean onMoveAllowDrag(android.view.MotionEvent,float) -> a
    void onMoveEvent(float) -> a
    void onUpEvent(android.view.MotionEvent) -> c
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void drawDropShadow(android.graphics.Canvas,int) -> a
    void drawMenuOverlay(android.graphics.Canvas,int) -> b
    void drawIndicator(android.graphics.Canvas,int) -> c
    void saveState(android.os.Bundle) -> a
    void restoreState(android.os.Parcelable) -> a
    void access$000(net.simonvt.menudrawer.DraggableDrawer) -> a
    void access$100(net.simonvt.menudrawer.DraggableDrawer) -> b
net.simonvt.menudrawer.DraggableDrawer$1 -> net.simonvt.menudrawer.j:
    net.simonvt.menudrawer.DraggableDrawer this$0 -> a
    void run() -> run
net.simonvt.menudrawer.DraggableDrawer$2 -> net.simonvt.menudrawer.k:
    net.simonvt.menudrawer.DraggableDrawer this$0 -> a
    void run() -> run
net.simonvt.menudrawer.DraggableDrawer$4 -> net.simonvt.menudrawer.l:
    net.simonvt.menudrawer.DraggableDrawer this$0 -> a
    void run() -> run
net.simonvt.menudrawer.FloatScroller -> net.simonvt.menudrawer.m:
    float mStart -> a
    float mFinal -> b
    float mCurr -> c
    long mStartTime -> d
    int mDuration -> e
    float mDurationReciprocal -> f
    float mDeltaX -> g
    boolean mFinished -> h
    android.view.animation.Interpolator mInterpolator -> i
    boolean isFinished() -> a
    float getCurr() -> b
    boolean computeScrollOffset() -> c
    void startScroll(float,float,int) -> a
net.simonvt.menudrawer.HorizontalDrawer -> net.simonvt.menudrawer.n:
    void onMeasure(int,int) -> onMeasure
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
net.simonvt.menudrawer.LeftDrawer -> net.simonvt.menudrawer.o:
    int mIndicatorTop -> P
    void openMenu(boolean) -> a
    void closeMenu(boolean) -> b
    void setDropShadowColor(int) -> setDropShadowColor
    void onLayout(boolean,int,int,int,int) -> onLayout
    void offsetMenu(int) -> c
    void drawDropShadow(android.graphics.Canvas,int) -> a
    void drawMenuOverlay(android.graphics.Canvas,int) -> b
    void drawIndicator(android.graphics.Canvas,int) -> c
    int getIndicatorStartPos() -> getIndicatorStartPos
    void initPeekScroller() -> a
    void onOffsetPixelsChanged(int) -> a
    boolean isContentTouch(android.view.MotionEvent) -> a
    boolean onDownAllowDrag(android.view.MotionEvent) -> b
    boolean onMoveAllowDrag(android.view.MotionEvent,float) -> a
    void onMoveEvent(float) -> a
    void onUpEvent(android.view.MotionEvent) -> c
net.simonvt.menudrawer.LeftStaticDrawer -> net.simonvt.menudrawer.p:
    int mIndicatorTop -> b
    void initDrawer(android.content.Context,android.util.AttributeSet,int) -> a
    void setDropShadowColor(int) -> setDropShadowColor
    void drawIndicator(android.graphics.Canvas) -> a
    int getIndicatorStartPos() -> getIndicatorStartPos
net.simonvt.menudrawer.MenuDrawer -> net.simonvt.menudrawer.MenuDrawer:
    boolean USE_TRANSLATIONS -> p
    android.view.animation.Interpolator SMOOTH_INTERPOLATOR -> q
    android.graphics.drawable.Drawable mMenuOverlay -> r
    boolean mDropShadowEnabled -> s
    android.graphics.drawable.Drawable mDropShadowDrawable -> t
    int mDropShadowSize -> u
    android.graphics.Bitmap mActiveIndicator -> v
    android.view.View mActiveView -> w
    int mActivePosition -> x
    boolean mAllowIndicatorAnimation -> a
    android.graphics.Rect mActiveRect -> y
    android.graphics.Rect mTempRect -> b
    android.view.View mMenuView -> c
    net.simonvt.menudrawer.BuildLayerFrameLayout mMenuContainer -> z
    net.simonvt.menudrawer.BuildLayerFrameLayout mContentContainer -> A
    int mMenuSize -> B
    boolean mMenuSizeSet -> C
    boolean mMenuVisible -> D
    int mDragMode -> d
    int mDrawerState -> E
    int mTouchBezelSize -> F
    int mTouchSize -> G
    net.simonvt.menudrawer.MenuDrawer$OnDrawerStateChangeListener mOnDrawerStateChangeListener -> e
    int mTouchMode -> H
    boolean mHardwareLayersEnabled -> I
    android.app.Activity mActivity -> f
    net.simonvt.menudrawer.FloatScroller mIndicatorScroller -> g
    java.lang.Runnable mIndicatorRunnable -> h
    int mIndicatorStartPos -> J
    float mIndicatorOffset -> K
    boolean mIndicatorAnimating -> L
    android.os.Bundle mState -> M
    int mMaxAnimationDuration -> N
    net.simonvt.menudrawer.MenuDrawer$OnInterceptMoveEventListener mOnInterceptMoveEventListener -> O
    android.view.ViewTreeObserver$OnScrollChangedListener mScrollListener -> i
    net.simonvt.menudrawer.MenuDrawer attach(android.app.Activity,net.simonvt.menudrawer.Position) -> a
    net.simonvt.menudrawer.MenuDrawer attach(android.app.Activity,int,net.simonvt.menudrawer.Position) -> a
    net.simonvt.menudrawer.MenuDrawer attach(android.app.Activity,int,net.simonvt.menudrawer.Position,boolean) -> a
    net.simonvt.menudrawer.MenuDrawer createMenuDrawer(android.app.Activity,int,net.simonvt.menudrawer.Position,boolean) -> b
    void attachToContent(android.app.Activity,net.simonvt.menudrawer.MenuDrawer) -> a
    void attachToDecor(android.app.Activity,net.simonvt.menudrawer.MenuDrawer) -> b
    void initDrawer(android.content.Context,android.util.AttributeSet,int) -> a
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    int dpToPx(int) -> b
    boolean isViewDescendant(android.view.View) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void openMenu() -> j
    void openMenu(boolean) -> a
    void closeMenu() -> k
    void closeMenu(boolean) -> b
    boolean isMenuVisible() -> b
    void setMenuSize(int) -> setMenuSize
    int getMenuSize() -> getMenuSize
    void setActiveView(android.view.View) -> setActiveView
    void setActiveView(android.view.View,int) -> a
    void setAllowIndicatorAnimation(boolean) -> setAllowIndicatorAnimation
    boolean getAllowIndicatorAnimation() -> getAllowIndicatorAnimation
    void startAnimatingIndicator() -> a
    int getIndicatorStartPos() -> getIndicatorStartPos
    void animateIndicatorInvalidate() -> c
    void completeAnimatingIndicator() -> d
    void setOffsetMenuEnabled(boolean) -> setOffsetMenuEnabled
    boolean getOffsetMenuEnabled() -> getOffsetMenuEnabled
    int getDrawerState() -> getDrawerState
    void setOnDrawerStateChangeListener(net.simonvt.menudrawer.MenuDrawer$OnDrawerStateChangeListener) -> setOnDrawerStateChangeListener
    void setOnInterceptMoveEventListener(net.simonvt.menudrawer.MenuDrawer$OnInterceptMoveEventListener) -> setOnInterceptMoveEventListener
    void setDropShadowEnabled(boolean) -> setDropShadowEnabled
    void setDropShadowColor(int) -> setDropShadowColor
    void setDropShadow(android.graphics.drawable.Drawable) -> setDropShadow
    void setDropShadow(int) -> setDropShadow
    android.graphics.drawable.Drawable getDropShadow() -> getDropShadow
    void setDropShadowSize(int) -> setDropShadowSize
    void setHardwareLayerEnabled(boolean) -> setHardwareLayerEnabled
    void setMaxAnimationDuration(int) -> setMaxAnimationDuration
    android.view.ViewGroup getMenuContainer() -> getMenuContainer
    android.view.ViewGroup getContentContainer() -> getContentContainer
    void setMenuView(int) -> setMenuView
    void setMenuView(android.view.View) -> setMenuView
    void setMenuView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    android.view.View getMenuView() -> getMenuView
    void setContentView(int) -> setContentView
    void setContentView(android.view.View) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> b
    void setDrawerState(int) -> setDrawerState
    int getTouchMode() -> getTouchMode
    void setTouchMode(int) -> setTouchMode
    void setTouchBezelSize(int) -> setTouchBezelSize
    int getTouchBezelSize() -> getTouchBezelSize
    void postOnAnimation(java.lang.Runnable) -> postOnAnimation
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
    void saveState(android.os.Bundle) -> a
    void restoreState(android.os.Parcelable) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void access$000(net.simonvt.menudrawer.MenuDrawer) -> a
    android.graphics.Rect access$100(net.simonvt.menudrawer.MenuDrawer) -> b
net.simonvt.menudrawer.MenuDrawer$1 -> net.simonvt.menudrawer.q:
    net.simonvt.menudrawer.MenuDrawer this$0 -> a
    void run() -> run
net.simonvt.menudrawer.MenuDrawer$2 -> net.simonvt.menudrawer.r:
    net.simonvt.menudrawer.MenuDrawer this$0 -> a
    void onScrollChanged() -> onScrollChanged
net.simonvt.menudrawer.MenuDrawer$3 -> net.simonvt.menudrawer.s:
    int[] $SwitchMap$net$simonvt$menudrawer$Position -> a
net.simonvt.menudrawer.MenuDrawer$OnDrawerStateChangeListener -> net.simonvt.menudrawer.t:
    void onDrawerStateChange(int,int) -> a
net.simonvt.menudrawer.MenuDrawer$OnInterceptMoveEventListener -> net.simonvt.menudrawer.u:
    boolean isViewDraggable(android.view.View,int,int,int) -> a
net.simonvt.menudrawer.MenuDrawer$SavedState -> net.simonvt.menudrawer.MenuDrawer$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
net.simonvt.menudrawer.MenuDrawer$SavedState$1 -> net.simonvt.menudrawer.v:
    net.simonvt.menudrawer.MenuDrawer$SavedState createFromParcel(android.os.Parcel) -> a
    net.simonvt.menudrawer.MenuDrawer$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
net.simonvt.menudrawer.NoClickThroughFrameLayout -> net.simonvt.menudrawer.w:
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
net.simonvt.menudrawer.PeekInterpolator -> net.simonvt.menudrawer.x:
    net.simonvt.menudrawer.SinusoidalInterpolator SINUSOIDAL_INTERPOLATOR -> a
    float getInterpolation(float) -> getInterpolation
net.simonvt.menudrawer.Position -> net.simonvt.menudrawer.y:
    net.simonvt.menudrawer.Position LEFT -> a
    net.simonvt.menudrawer.Position TOP -> b
    net.simonvt.menudrawer.Position RIGHT -> c
    net.simonvt.menudrawer.Position BOTTOM -> d
    net.simonvt.menudrawer.Position[] $VALUES -> e
    net.simonvt.menudrawer.Position[] values() -> values
    net.simonvt.menudrawer.Position valueOf(java.lang.String) -> valueOf
net.simonvt.menudrawer.R -> net.simonvt.menudrawer.z:
net.simonvt.menudrawer.R$attr -> net.simonvt.menudrawer.aa:
    int mdActiveIndicator -> mdActiveIndicator
    int mdAllowIndicatorAnimation -> mdAllowIndicatorAnimation
    int mdContentBackground -> mdContentBackground
    int mdDropShadow -> mdDropShadow
    int mdDropShadowColor -> mdDropShadowColor
    int mdDropShadowEnabled -> mdDropShadowEnabled
    int mdDropShadowSize -> mdDropShadowSize
    int mdMaxAnimationDuration -> mdMaxAnimationDuration
    int mdMenuBackground -> mdMenuBackground
    int mdMenuSize -> mdMenuSize
    int mdTouchBezelSize -> mdTouchBezelSize
    int menuDrawerStyle -> menuDrawerStyle
net.simonvt.menudrawer.R$id -> net.simonvt.menudrawer.ab:
    int mdActiveViewPosition -> mdActiveViewPosition
    int mdContent -> mdContent
    int mdMenu -> mdMenu
    int md__content -> md__content
    int md__drawer -> md__drawer
    int md__menu -> md__menu
net.simonvt.menudrawer.R$style -> net.simonvt.menudrawer.ac:
    int Widget -> Widget
    int Widget_MenuDrawer -> Widget_MenuDrawer
net.simonvt.menudrawer.R$styleable -> net.simonvt.menudrawer.ad:
    int[] MenuDrawer -> MenuDrawer
    int MenuDrawer_mdActiveIndicator -> MenuDrawer_mdActiveIndicator
    int MenuDrawer_mdAllowIndicatorAnimation -> MenuDrawer_mdAllowIndicatorAnimation
    int MenuDrawer_mdContentBackground -> MenuDrawer_mdContentBackground
    int MenuDrawer_mdDropShadow -> MenuDrawer_mdDropShadow
    int MenuDrawer_mdDropShadowColor -> MenuDrawer_mdDropShadowColor
    int MenuDrawer_mdDropShadowEnabled -> MenuDrawer_mdDropShadowEnabled
    int MenuDrawer_mdDropShadowSize -> MenuDrawer_mdDropShadowSize
    int MenuDrawer_mdMaxAnimationDuration -> MenuDrawer_mdMaxAnimationDuration
    int MenuDrawer_mdMenuBackground -> MenuDrawer_mdMenuBackground
    int MenuDrawer_mdMenuSize -> MenuDrawer_mdMenuSize
    int MenuDrawer_mdTouchBezelSize -> MenuDrawer_mdTouchBezelSize
net.simonvt.menudrawer.RightDrawer -> net.simonvt.menudrawer.ae:
    int mIndicatorTop -> P
    void openMenu(boolean) -> a
    void closeMenu(boolean) -> b
    void setDropShadowColor(int) -> setDropShadowColor
    void onLayout(boolean,int,int,int,int) -> onLayout
    void offsetMenu(int) -> c
    void drawDropShadow(android.graphics.Canvas,int) -> a
    void drawMenuOverlay(android.graphics.Canvas,int) -> b
    void drawIndicator(android.graphics.Canvas,int) -> c
    int getIndicatorStartPos() -> getIndicatorStartPos
    void initPeekScroller() -> a
    void onOffsetPixelsChanged(int) -> a
    boolean isContentTouch(android.view.MotionEvent) -> a
    boolean onDownAllowDrag(android.view.MotionEvent) -> b
    boolean onMoveAllowDrag(android.view.MotionEvent,float) -> a
    void onMoveEvent(float) -> a
    void onUpEvent(android.view.MotionEvent) -> c
net.simonvt.menudrawer.RightStaticDrawer -> net.simonvt.menudrawer.af:
    int mIndicatorTop -> b
    void initDrawer(android.content.Context,android.util.AttributeSet,int) -> a
    void setDropShadowColor(int) -> setDropShadowColor
    void drawIndicator(android.graphics.Canvas) -> a
    int getIndicatorStartPos() -> getIndicatorStartPos
net.simonvt.menudrawer.Scroller -> net.simonvt.menudrawer.ag:
    int mMode -> a
    int mStartX -> b
    int mStartY -> c
    int mFinalX -> d
    int mFinalY -> e
    int mMinX -> f
    int mMaxX -> g
    int mMinY -> h
    int mMaxY -> i
    int mCurrX -> j
    int mCurrY -> k
    long mStartTime -> l
    int mDuration -> m
    float mDurationReciprocal -> n
    float mDeltaX -> o
    float mDeltaY -> p
    boolean mFinished -> q
    android.view.animation.Interpolator mInterpolator -> r
    boolean mFlywheel -> s
    float DECELERATION_RATE -> t
    float[] SPLINE -> u
    float mDeceleration -> v
    float mPpi -> w
    float sViscousFluidScale -> x
    float sViscousFluidNormalize -> y
    float computeDeceleration(float) -> b
    boolean isFinished() -> a
    int getCurrX() -> b
    int getFinalX() -> c
    boolean computeScrollOffset() -> d
    void startScroll(int,int,int,int,int) -> a
    float viscousFluid(float) -> a
    void abortAnimation() -> e
net.simonvt.menudrawer.SinusoidalInterpolator -> net.simonvt.menudrawer.ah:
    float getInterpolation(float) -> getInterpolation
net.simonvt.menudrawer.SmoothInterpolator -> net.simonvt.menudrawer.ai:
    float getInterpolation(float) -> getInterpolation
net.simonvt.menudrawer.StaticDrawer -> net.simonvt.menudrawer.aj:
    net.simonvt.menudrawer.Position mPosition -> a
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void drawDropShadow(android.graphics.Canvas) -> b
    void drawIndicator(android.graphics.Canvas) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    void openMenu(boolean) -> a
    void closeMenu(boolean) -> b
    boolean isMenuVisible() -> b
    void setMenuSize(int) -> setMenuSize
    void setOffsetMenuEnabled(boolean) -> setOffsetMenuEnabled
    boolean getOffsetMenuEnabled() -> getOffsetMenuEnabled
    void setHardwareLayerEnabled(boolean) -> setHardwareLayerEnabled
    int getTouchMode() -> getTouchMode
    void setTouchMode(int) -> setTouchMode
    void setTouchBezelSize(int) -> setTouchBezelSize
    int getTouchBezelSize() -> getTouchBezelSize
net.simonvt.menudrawer.StaticDrawer$1 -> net.simonvt.menudrawer.ak:
    int[] $SwitchMap$net$simonvt$menudrawer$Position -> a
net.simonvt.menudrawer.TopDrawer -> net.simonvt.menudrawer.al:
    int mIndicatorLeft -> P
    void openMenu(boolean) -> a
    void closeMenu(boolean) -> b
    void setDropShadowColor(int) -> setDropShadowColor
    void onLayout(boolean,int,int,int,int) -> onLayout
    void offsetMenu(int) -> c
    void drawDropShadow(android.graphics.Canvas,int) -> a
    void drawMenuOverlay(android.graphics.Canvas,int) -> b
    void drawIndicator(android.graphics.Canvas,int) -> c
    int getIndicatorStartPos() -> getIndicatorStartPos
    void initPeekScroller() -> a
    void onOffsetPixelsChanged(int) -> a
    boolean isContentTouch(android.view.MotionEvent) -> a
    boolean onDownAllowDrag(android.view.MotionEvent) -> b
    boolean onMoveAllowDrag(android.view.MotionEvent,float) -> a
    void onMoveEvent(float) -> a
    void onUpEvent(android.view.MotionEvent) -> c
net.simonvt.menudrawer.TopStaticDrawer -> net.simonvt.menudrawer.am:
    int mIndicatorLeft -> b
    void initDrawer(android.content.Context,android.util.AttributeSet,int) -> a
    void setDropShadowColor(int) -> setDropShadowColor
    void drawIndicator(android.graphics.Canvas) -> a
    int getIndicatorStartPos() -> getIndicatorStartPos
net.simonvt.menudrawer.VerticalDrawer -> net.simonvt.menudrawer.an:
    void onMeasure(int,int) -> onMeasure
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
org.lmw.tools.kdserch.BaseActivity -> org.lmw.tools.kdserch.a:
    android.widget.Toast mToast -> a
    org.lmw.tools.kdserch.tools.LoadingDialog dialog -> b
    java.lang.String[] companyLogos -> c
    java.lang.String[] companyCodes -> d
    java.lang.String[] companyNames -> e
    com.lidroid.xutils.DbUtils db -> f
    void onCreate(android.os.Bundle) -> onCreate
    void showToast(java.lang.String) -> a
    void showLoadingDialog(java.lang.String) -> b
    void dismissLoadingDialog() -> a
    void onDestroy() -> onDestroy
org.lmw.tools.kdserch.Coms -> org.lmw.tools.kdserch.Coms:
    android.widget.ListView lv -> g
    org.lmw.tools.kdserch.adapter.ComsAdapter adapter -> h
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> b
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.lmw.tools.kdserch.History -> org.lmw.tools.kdserch.History:
    android.widget.TextView count -> g
    android.widget.ListView lv -> h
    org.lmw.tools.kdserch.adapter.HistoryListAdapter adapter -> i
    java.util.List rs -> j
    android.os.Handler hd -> k
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> b
    android.os.Handler getHandler() -> c
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
org.lmw.tools.kdserch.History$1 -> org.lmw.tools.kdserch.b:
    org.lmw.tools.kdserch.History this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.lmw.tools.kdserch.Main -> org.lmw.tools.kdserch.Main:
    boolean isBack -> h
    long downTime -> i
    android.widget.Button currCom -> j
    android.widget.Button serach -> k
    android.widget.ImageButton speech -> l
    net.simonvt.menudrawer.MenuDrawer mMenuDrawer -> m
    int coms_req -> n
    java.lang.String comName -> o
    java.lang.String comId -> p
    android.widget.EditText expressId -> q
    android.widget.Button toHistory -> r
    android.os.Handler hd -> s
    com.iflytek.cloud.ui.RecognizerDialog iatDialog -> t
    com.iflytek.cloud.speech.SpeechRecognizer iatRecognizer -> u
    com.iflytek.cloud.speech.SpeechListener listener -> v
    com.iflytek.cloud.ui.RecognizerDialogListener recognizerDialogListener -> g
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> b
    void initMenu() -> e
    android.os.Handler getHandler() -> f
    void onClick(android.view.View) -> onClick
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void initSpeech() -> c
    void showIatDialog() -> d
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onStop() -> onStop
    android.widget.EditText access$000(org.lmw.tools.kdserch.Main) -> a
    java.lang.String access$100(org.lmw.tools.kdserch.Main) -> b
    java.lang.String access$200(org.lmw.tools.kdserch.Main) -> c
org.lmw.tools.kdserch.Main$1 -> org.lmw.tools.kdserch.c:
    org.lmw.tools.kdserch.Main this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.lmw.tools.kdserch.Main$2 -> org.lmw.tools.kdserch.d:
    org.lmw.tools.kdserch.Main this$0 -> a
    void onData(byte[]) -> onData
    void onCompleted(com.iflytek.cloud.speech.SpeechError) -> onCompleted
    void onEvent(int,android.os.Bundle) -> onEvent
org.lmw.tools.kdserch.Main$3 -> org.lmw.tools.kdserch.e:
    org.lmw.tools.kdserch.Main this$0 -> a
    void onResult(com.iflytek.cloud.speech.RecognizerResult,boolean) -> onResult
    void onError(com.iflytek.cloud.speech.SpeechError) -> onError
org.lmw.tools.kdserch.Result -> org.lmw.tools.kdserch.Result:
    android.widget.ListView lv -> g
    org.lmw.tools.kdserch.adapter.ResultFollowAdapter adapter -> h
    java.util.List rs -> i
    boolean sort_up -> j
    int state -> k
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> b
    void parse(java.lang.String) -> c
    void onBackPressed() -> onBackPressed
org.lmw.tools.kdserch.Result$1 -> org.lmw.tools.kdserch.f:
    org.lmw.tools.kdserch.Result this$0 -> d
org.lmw.tools.kdserch.adapter.ComsAdapter -> org.lmw.tools.kdserch.a.a:
    android.content.Context context -> d
    java.lang.String[] companyLogos -> a
    java.lang.String[] companyCodes -> b
    java.lang.String[] companyNames -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.graphics.Bitmap getBmp(java.lang.String) -> a
org.lmw.tools.kdserch.adapter.HistoryListAdapter -> org.lmw.tools.kdserch.a.b:
    android.content.Context context -> a
    java.util.List dataList -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
org.lmw.tools.kdserch.adapter.ResultFollowAdapter -> org.lmw.tools.kdserch.a.c:
    android.content.Context context -> c
    java.util.List followList -> d
    boolean sort_up -> a
    int state -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
org.lmw.tools.kdserch.conn.ConnHelper -> org.lmw.tools.kdserch.b.a:
    com.lidroid.xutils.HttpUtils hu -> a
    void Serach(java.lang.String,java.lang.String,android.os.Handler) -> a
org.lmw.tools.kdserch.conn.ConnHelper$1 -> org.lmw.tools.kdserch.b.b:
    android.os.Handler val$hd -> a
    void onSuccess(com.lidroid.xutils.http.ResponseInfo) -> a
    void onFailure(com.lidroid.xutils.exception.HttpException,java.lang.String) -> a
org.lmw.tools.kdserch.entity.ResultEntity -> org.lmw.tools.kdserch.c.a:
    java.lang.String time -> a
    java.lang.String context -> b
    java.lang.String getTime() -> a
    java.lang.String getContext() -> b
org.lmw.tools.kdserch.entity.Tab_History -> org.lmw.tools.kdserch.c.b:
    java.lang.String comName -> a
    java.lang.String comId -> b
    java.lang.String expressId -> c
    java.lang.String getComName() -> a
    void setComName(java.lang.String) -> a
    java.lang.String getComId() -> b
    void setComId(java.lang.String) -> b
    java.lang.String getExpressId() -> c
    void setExpressId(java.lang.String) -> c
org.lmw.tools.kdserch.tools.AppManager -> org.lmw.tools.kdserch.d.a:
    java.util.Stack activityStack -> a
    org.lmw.tools.kdserch.tools.AppManager instance -> b
    org.lmw.tools.kdserch.tools.AppManager getAppManager() -> a
    void addActivity(android.app.Activity) -> a
    void finishActivity(android.app.Activity) -> b
    void finishAllActivity() -> b
    void AppExit(android.content.Context) -> a
org.lmw.tools.kdserch.tools.JsonParser -> org.lmw.tools.kdserch.d.b:
    java.lang.String parseIatResult(java.lang.String) -> a
org.lmw.tools.kdserch.tools.LoadingDialog -> org.lmw.tools.kdserch.d.c:
    android.widget.TextView tips_loading_msg -> a
    java.lang.String message -> b
    void onCreate(android.os.Bundle) -> onCreate
